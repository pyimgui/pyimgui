/* Generated by Cython 0.29.23 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "PYIMGUI_CUSTOM_EXCEPTION",
                null
            ],
            [
                "IMGUI_API",
                "__declspec(dllimport)"
            ]
        ],
        "depends": [
            "imgui-cpp\\imgui.h",
            "imgui-cpp\\imgui_internal.h"
        ],
        "extra_compile_args": [
            "/FIpy_imconfig.h"
        ],
        "include_dirs": [
            "imgui-cpp",
            "gaiaengine/imgui",
            "config-cpp",
            "ansifeed-cpp"
        ],
        "language": "c++",
        "name": "gaiaengine.imgui.internal",
        "sources": [
            "gaiaengine/imgui/internal.pyx",
            "config-cpp/py_imconfig.cpp"
        ]
    },
    "module_name": "gaiaengine.imgui.internal"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_23"
#define CYTHON_HEX_VERSION 0x001D17F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__gaiaengine__imgui__internal
#define __PYX_HAVE_API__gaiaengine__imgui__internal
/* Early includes */
#include "imgui.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "imgui_internal.h"
#include <string.h>
#include <stdio.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "gaiaengine\\imgui\\common.pyx",
  "gaiaengine\\imgui\\internal.pyx",
  "type.pxd",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlagsPrivate_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSliderFlagsPrivate_(ImGuiSliderFlagsPrivate_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlagsPrivate_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlagsPrivate_(ImGuiTreeNodeFlagsPrivate_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSeparatorFlags_(ImGuiSeparatorFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTextFlags_(ImGuiTextFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTooltipFlags_(ImGuiTooltipFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiLayoutType_(ImGuiLayoutType_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiAxis(ImGuiAxis value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiPlotType(ImGuiPlotType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavDirSourceFlags_(ImGuiNavDirSourceFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavForward(ImGuiNavForward value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavLayer(ImGuiNavLayer value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiPopupPositionPolicy(ImGuiPopupPositionPolicy value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNextItemDataFlags_(ImGuiNextItemDataFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabBarFlagsPrivate_(ImGuiTabBarFlagsPrivate_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabItemFlagsPrivate_(ImGuiTabItemFlagsPrivate_ value);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiItemFlags __Pyx_PyInt_As_ImGuiItemFlags(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'gaiaengine.imgui.enums' */

/* Module declarations from 'gaiaengine.imgui.cimgui' */

/* Module declarations from 'gaiaengine.imgui.enums_internal' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'gaiaengine.imgui.internal' */
__PYX_EXTERN_C DL_EXPORT(PyObject) *ImGuiError;
#define __Pyx_MODULE_NAME "gaiaengine.imgui.internal"
extern int __pyx_module_is_main_gaiaengine__imgui__internal;
int __pyx_module_is_main_gaiaengine__imgui__internal = 0;

/* Implementation of 'gaiaengine.imgui.internal' */
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_Vec2[] = "Vec2";
static const char __pyx_k_Vec4[] = "Vec4";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_AXIS_X[] = "AXIS_X";
static const char __pyx_k_AXIS_Y[] = "AXIS_Y";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_option[] = "option";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_AXIS_NONE[] = "AXIS_NONE";
static const char __pyx_k_ITEM_NONE[] = "ITEM_NONE";
static const char __pyx_k_TEXT_NONE[] = "TEXT_NONE";
static const char __pyx_k_ImGuiError[] = "ImGuiError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_namedtuple[] = "namedtuple";
static const char __pyx_k_ITEM_NO_NAV[] = "ITEM_NO_NAV";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_ITEM_DEFAULT[] = "ITEM_DEFAULT";
static const char __pyx_k_TOOLTIP_NONE[] = "TOOLTIP_NONE";
static const char __pyx_k_BUTTON_REPEAT[] = "BUTTON_REPEAT";
static const char __pyx_k_ITEM_DISABLED[] = "ITEM_DISABLED";
static const char __pyx_k_LOG_TYPE_NONE[] = "LOG_TYPE_NONE";
static const char __pyx_k_NAV_MOVE_NONE[] = "NAV_MOVE_NONE";
static const char __pyx_k_pop_item_flag[] = "pop_item_flag";
static const char __pyx_k_ITEM_READ_ONLY[] = "ITEM_READ_ONLY";
static const char __pyx_k_NAV_LAYER_MAIN[] = "NAV_LAYER_MAIN";
static const char __pyx_k_NAV_LAYER_MENU[] = "NAV_LAYER_MENU";
static const char __pyx_k_SEPARATOR_NONE[] = "SEPARATOR_NONE";
static const char __pyx_k_push_item_flag[] = "push_item_flag";
static const char __pyx_k_BUTTON_DISABLED[] = "BUTTON_DISABLED";
static const char __pyx_k_NAV_LAYER_COUNT[] = "NAV_LAYER_COUNT";
static const char __pyx_k_NAV_MOVE_LOOP_X[] = "NAV_MOVE_LOOP_X";
static const char __pyx_k_NAV_MOVE_LOOP_Y[] = "NAV_MOVE_LOOP_Y";
static const char __pyx_k_NAV_MOVE_WRAP_X[] = "NAV_MOVE_WRAP_X";
static const char __pyx_k_NAV_MOVE_WRAP_Y[] = "NAV_MOVE_WRAP_Y";
static const char __pyx_k_PLOT_TYPE_LINES[] = "PLOT_TYPE_LINES";
static const char __pyx_k_SLIDER_VERTICAL[] = "SLIDER_VERTICAL";
static const char __pyx_k_TAB_ITEM_BUTTON[] = "TAB_ITEM_BUTTON";
static const char __pyx_k_INPUT_SOURCE_NAV[] = "INPUT_SOURCE_NAV";
static const char __pyx_k_ITEM_MIXED_VALUE[] = "ITEM_MIXED_VALUE";
static const char __pyx_k_ITEM_NO_TAB_STOP[] = "ITEM_NO_TAB_STOP";
static const char __pyx_k_ITEM_STATUS_NONE[] = "ITEM_STATUS_NONE";
static const char __pyx_k_NAV_FORWARD_NONE[] = "NAV_FORWARD_NONE";
static const char __pyx_k_OLD_COLUMNS_NONE[] = "OLD_COLUMNS_NONE";
static const char __pyx_k_SLIDER_READ_ONLY[] = "SLIDER_READ_ONLY";
static const char __pyx_k_INPUT_SOURCE_NONE[] = "INPUT_SOURCE_NONE";
static const char __pyx_k_TAB_BAR_DOCK_NODE[] = "TAB_BAR_DOCK_NODE";
static const char __pyx_k_INPUT_SOURCE_COUNT[] = "INPUT_SOURCE_COUNT";
static const char __pyx_k_INPUT_SOURCE_MOUSE[] = "INPUT_SOURCE_MOUSE";
static const char __pyx_k_ITEM_BUTTON_REPEAT[] = "ITEM_BUTTON_REPEAT";
static const char __pyx_k_ITEM_STATUS_EDITED[] = "ITEM_STATUS_EDITED";
static const char __pyx_k_NAV_HIGHLIGHT_NONE[] = "NAV_HIGHLIGHT_NONE";
static const char __pyx_k_SEPARATOR_VERTICAL[] = "SEPARATOR_VERTICAL";
static const char __pyx_k_TAB_BAR_IS_FOCUSED[] = "TAB_BAR_IS_FOCUSED";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_BUTTON_NO_NAV_FOCUS[] = "BUTTON_NO_NAV_FOCUS";
static const char __pyx_k_NAV_DIR_SOURCE_NONE[] = "NAV_DIR_SOURCE_NONE";
static const char __pyx_k_NEXT_ITEM_DATA_NONE[] = "NEXT_ITEM_DATA_NONE";
static const char __pyx_k_PLOT_TYPE_HISTOGRAM[] = "PLOT_TYPE_HISTOGRAM";
static const char __pyx_k_INPUT_READ_MODE_DOWN[] = "INPUT_READ_MODE_DOWN";
static const char __pyx_k_INPUT_SOURCE_GAMEPAD[] = "INPUT_SOURCE_GAMEPAD";
static const char __pyx_k_LAYOUT_TYPE_VERTICAL[] = "LAYOUT_TYPE_VERTICAL";
static const char __pyx_k_SEPARATOR_HORIZONTAL[] = "SEPARATOR_HORIZONTAL";
static const char __pyx_k_INPUT_SOURCE_KEYBOARD[] = "INPUT_SOURCE_KEYBOARD";
static const char __pyx_k_LOG_TYPE_LOG_TYPE_TTY[] = "LOG_TYPE_LOG_TYPE_TTY";
static const char __pyx_k_NEXT_WINDOW_DATA_NONE[] = "NEXT_WINDOW_DATA_NONE";
static const char __pyx_k_OLD_COLUMNS_NO_BORDER[] = "OLD_COLUMNS_NO_BORDER";
static const char __pyx_k_OLD_COLUMNS_NO_RESIZE[] = "OLD_COLUMNS_NO_RESIZE";
static const char __pyx_k_TAB_BAR_SAVE_SETTINGS[] = "TAB_BAR_SAVE_SETTINGS";
static const char __pyx_k_BUTTON_PRESSED_ON_MASK[] = "BUTTON_PRESSED_ON_MASK";
static const char __pyx_k_INPUT_READ_MODE_REPEAT[] = "INPUT_READ_MODE_REPEAT";
static const char __pyx_k_LAYOUT_TYPE_HORIZONTAL[] = "LAYOUT_TYPE_HORIZONTAL";
static const char __pyx_k_LOG_TYPE_LOG_TYPE_FILE[] = "LOG_TYPE_LOG_TYPE_FILE";
static const char __pyx_k_BUTTON_FLATTEN_CHILDREN[] = "BUTTON_FLATTEN_CHILDREN";
static const char __pyx_k_BUTTON_NO_KEY_MODIFIERS[] = "BUTTON_NO_KEY_MODIFIERS";
static const char __pyx_k_BUTTON_PRESSED_ON_CLICK[] = "BUTTON_PRESSED_ON_CLICK";
static const char __pyx_k_INPUT_READ_MODE_PRESSED[] = "INPUT_READ_MODE_PRESSED";
static const char __pyx_k_ITEM_STATUS_DEACTIVATED[] = "ITEM_STATUS_DEACTIVATED";
static const char __pyx_k_NAV_DIR_SOURCE_KEYBOARD[] = "NAV_DIR_SOURCE_KEYBOARD";
static const char __pyx_k_NAV_HIGHLIGHT_TYPE_THIN[] = "NAV_HIGHLIGHT_TYPE_THIN";
static const char __pyx_k_NAV_MOVE_SCROLL_TO_EDGE[] = "NAV_MOVE_SCROLL_TO_EDGE";
static const char __pyx_k_NEXT_ITEM_DATA_HAS_OPEN[] = "NEXT_ITEM_DATA_HAS_OPEN";
static const char __pyx_k_BUTTON_DONT_CLOSE_POPUPS[] = "BUTTON_DONT_CLOSE_POPUPS";
static const char __pyx_k_INPUT_READ_MODE_RELEASED[] = "INPUT_READ_MODE_RELEASED";
static const char __pyx_k_ITEM_STATUS_HOVERED_RECT[] = "ITEM_STATUS_HOVERED_RECT";
static const char __pyx_k_ITEM_STATUS_TOGGLED_OPEN[] = "ITEM_STATUS_TOGGLED_OPEN";
static const char __pyx_k_LOG_TYPE_LOG_TYPE_BUFFER[] = "LOG_TYPE_LOG_TYPE_BUFFER";
static const char __pyx_k_NAV_DIR_SOURCE_PAD_D_PAD[] = "NAV_DIR_SOURCE_PAD_D_PAD";
static const char __pyx_k_NEXT_ITEM_DATA_HAS_WIDTH[] = "NEXT_ITEM_DATA_HAS_WIDTH";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_POS[] = "NEXT_WINDOW_DATA_HAS_POS";
static const char __pyx_k_TAB_ITEM_NO_CLOSE_BUTTON[] = "TAB_ITEM_NO_CLOSE_BUTTON";
static const char __pyx_k_BUTTON_ALLOW_ITEM_OVERLAP[] = "BUTTON_ALLOW_ITEM_OVERLAP";
static const char __pyx_k_BUTTON_PRESSED_ON_DEFAULT[] = "BUTTON_PRESSED_ON_DEFAULT";
static const char __pyx_k_BUTTON_PRESSED_ON_RELEASE[] = "BUTTON_PRESSED_ON_RELEASE";
static const char __pyx_k_ITEM_NO_NAV_DEFAULT_FOCUS[] = "ITEM_NO_NAV_DEFAULT_FOCUS";
static const char __pyx_k_NAV_HIGHLIGHT_ALWAYS_DRAW[] = "NAV_HIGHLIGHT_ALWAYS_DRAW";
static const char __pyx_k_NAV_HIGHLIGHT_NO_ROUNDING[] = "NAV_HIGHLIGHT_NO_ROUNDING";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_SIZE[] = "NEXT_WINDOW_DATA_HAS_SIZE";
static const char __pyx_k_gaiaengine_imgui_internal[] = "gaiaengine.imgui.internal";
static const char __pyx_k_BUTTON_NO_HOVERED_ON_FOCUS[] = "BUTTON_NO_HOVERED_ON_FOCUS";
static const char __pyx_k_NAV_DIR_SOURCE_PAD_L_STICK[] = "NAV_DIR_SOURCE_PAD_L_STICK";
static const char __pyx_k_NAV_FORWARD_FORWARD_ACTIVE[] = "NAV_FORWARD_FORWARD_ACTIVE";
static const char __pyx_k_NAV_FORWARD_FORWARD_QUEUED[] = "NAV_FORWARD_FORWARD_QUEUED";
static const char __pyx_k_NAV_HIGHLIGHT_TYPE_DEFAULT[] = "NAV_HIGHLIGHT_TYPE_DEFAULT";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_FOCUS[] = "NEXT_WINDOW_DATA_HAS_FOCUS";
static const char __pyx_k_SELECTABLE_SELECT_ON_CLICK[] = "SELECTABLE_SELECT_ON_CLICK";
static const char __pyx_k_SEPARATOR_SPAN_ALL_COLUMNS[] = "SEPARATOR_SPAN_ALL_COLUMNS";
static const char __pyx_k_BUTTON_ALIGN_TEXT_BASE_LINE[] = "BUTTON_ALIGN_TEXT_BASE_LINE";
static const char __pyx_k_BUTTON_NO_HOLDING_ACTIVE_ID[] = "BUTTON_NO_HOLDING_ACTIVE_ID";
static const char __pyx_k_INPUT_READ_MODE_REPEAT_FAST[] = "INPUT_READ_MODE_REPEAT_FAST";
static const char __pyx_k_INPUT_READ_MODE_REPEAT_SLOW[] = "INPUT_READ_MODE_REPEAT_SLOW";
static const char __pyx_k_ITEM_STATUS_HAS_DEACTIVATED[] = "ITEM_STATUS_HAS_DEACTIVATED";
static const char __pyx_k_LOG_TYPE_LOG_TYPE_CLIPBOARD[] = "LOG_TYPE_LOG_TYPE_CLIPBOARD";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_SCROLL[] = "NEXT_WINDOW_DATA_HAS_SCROLL";
static const char __pyx_k_ITEM_STATUS_HAS_DISPLAY_RECT[] = "ITEM_STATUS_HAS_DISPLAY_RECT";
static const char __pyx_k_SELECTABLE_SELECT_ON_RELEASE[] = "SELECTABLE_SELECT_ON_RELEASE";
static const char __pyx_k_ITEM_STATUS_TOGGLED_SELECTION[] = "ITEM_STATUS_TOGGLED_SELECTION";
static const char __pyx_k_NAV_MOVE_ALLOW_CURRENT_NAV_ID[] = "NAV_MOVE_ALLOW_CURRENT_NAV_ID";
static const char __pyx_k_POPUP_POSITION_POLICY_DEFAULT[] = "POPUP_POSITION_POLICY_DEFAULT";
static const char __pyx_k_POPUP_POSITION_POLICY_TOOLTIP[] = "POPUP_POSITION_POLICY_TOOLTIP";
static const char __pyx_k_gaiaengine_imgui_internal_pyx[] = "gaiaengine\\imgui\\internal.pyx";
static const char __pyx_k_BUTTON_PRESSED_ON_DOUBLE_CLICK[] = "BUTTON_PRESSED_ON_DOUBLE_CLICK";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_COLLAPSED[] = "NEXT_WINDOW_DATA_HAS_COLLAPSED";
static const char __pyx_k_OLD_COLUMNS_NO_PRESERVE_WIDTHS[] = "OLD_COLUMNS_NO_PRESERVE_WIDTHS";
static const char __pyx_k_SELECTABLE_SET_NAV_ID_ON_HOVER[] = "SELECTABLE_SET_NAV_ID_ON_HOVER";
static const char __pyx_k_pair_param_must_be_length_of_2[] = "pair param must be length of 2";
static const char __pyx_k_BUTTON_PRESSED_ON_CLICK_RELEASE[] = "BUTTON_PRESSED_ON_CLICK_RELEASE";
static const char __pyx_k_NAV_MOVE_ALSO_SCORE_VISIBLE_SET[] = "NAV_MOVE_ALSO_SCORE_VISIBLE_SET";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_BACKGROUND[] = "NEXT_WINDOW_DATA_HAS_BACKGROUND_ALPHA";
static const char __pyx_k_POPUP_POSITION_POLICY_COMBO_BOX[] = "POPUP_POSITION_POLICY_COMBO_BOX";
static const char __pyx_k_SELECTABLE_NO_HOLDING_ACTIVE_ID[] = "SELECTABLE_NO_HOLDING_ACTIVE_ID";
static const char __pyx_k_SELECTABLE_SPAN_AVAILABLE_WIDTH[] = "SELECTABLE_SPAN_AVAILABLE_WIDTH";
static const char __pyx_k_TEXT_NO_WIDTH_FRO_LARGE_CLIPPED[] = "TEXT_NO_WIDTH_FRO_LARGE_CLIPPED_TEXT";
static const char __pyx_k_BUTTON_PRESSED_ON_DRAG_DROP_HOLD[] = "BUTTON_PRESSED_ON_DRAG_DROP_HOLD";
static const char __pyx_k_ITEM_SELECTABLE_DONT_CLOSE_POPUP[] = "ITEM_SELECTABLE_DONT_CLOSE_POPUP";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_CONTENT_SIZ[] = "NEXT_WINDOW_DATA_HAS_CONTENT_SIZE";
static const char __pyx_k_NEXT_WINDOW_DATA_HAS_SIZE_CONSTR[] = "NEXT_WINDOW_DATA_HAS_SIZE_CONSTRAINT";
static const char __pyx_k_OLD_COLUMNS_GROW_PARENT_CONTENTS[] = "OLD_COLUMNS_GROW_PARENT_CONTENTS_SIZE";
static const char __pyx_k_OLD_COLUMNS_NO_FORCE_WIDTHIN_WIN[] = "OLD_COLUMNS_NO_FORCE_WIDTHIN_WINDOW";
static const char __pyx_k_SELECTABLE_DRAW_HOVERED_WHEN_HEL[] = "SELECTABLE_DRAW_HOVERED_WHEN_HELD";
static const char __pyx_k_SELECTABLE_NO_PAD_WIDHT_HALF_SPA[] = "SELECTABLE_NO_PAD_WIDHT_HALF_SPACING";
static const char __pyx_k_TOOLTIP_OVERRIDE_PREVIOUS_TOOLTI[] = "TOOLTIP_OVERRIDE_PREVIOUS_TOOLTIP";
static const char __pyx_k_TREE_NODE_CLIP_LABEL_FOR_TRAILIN[] = "TREE_NODE_CLIP_LABEL_FOR_TRAILING_BUTTON";
static const char __pyx_k_quadruple_param_must_be_length_o[] = "quadruple param must be length of 4";
static const char __pyx_k_BUTTON_PRESSED_ON_CLICK_RELEASE_2[] = "BUTTON_PRESSED_ON_CLICK_RELEASE_ANYWHERE";
static PyObject *__pyx_n_s_AXIS_NONE;
static PyObject *__pyx_n_s_AXIS_X;
static PyObject *__pyx_n_s_AXIS_Y;
static PyObject *__pyx_n_s_BUTTON_ALIGN_TEXT_BASE_LINE;
static PyObject *__pyx_n_s_BUTTON_ALLOW_ITEM_OVERLAP;
static PyObject *__pyx_n_s_BUTTON_DISABLED;
static PyObject *__pyx_n_s_BUTTON_DONT_CLOSE_POPUPS;
static PyObject *__pyx_n_s_BUTTON_FLATTEN_CHILDREN;
static PyObject *__pyx_n_s_BUTTON_NO_HOLDING_ACTIVE_ID;
static PyObject *__pyx_n_s_BUTTON_NO_HOVERED_ON_FOCUS;
static PyObject *__pyx_n_s_BUTTON_NO_KEY_MODIFIERS;
static PyObject *__pyx_n_s_BUTTON_NO_NAV_FOCUS;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_CLICK;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_CLICK_RELEASE;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_CLICK_RELEASE_2;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_DEFAULT;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_DOUBLE_CLICK;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_DRAG_DROP_HOLD;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_MASK;
static PyObject *__pyx_n_s_BUTTON_PRESSED_ON_RELEASE;
static PyObject *__pyx_n_s_BUTTON_REPEAT;
static PyObject *__pyx_n_s_INPUT_READ_MODE_DOWN;
static PyObject *__pyx_n_s_INPUT_READ_MODE_PRESSED;
static PyObject *__pyx_n_s_INPUT_READ_MODE_RELEASED;
static PyObject *__pyx_n_s_INPUT_READ_MODE_REPEAT;
static PyObject *__pyx_n_s_INPUT_READ_MODE_REPEAT_FAST;
static PyObject *__pyx_n_s_INPUT_READ_MODE_REPEAT_SLOW;
static PyObject *__pyx_n_s_INPUT_SOURCE_COUNT;
static PyObject *__pyx_n_s_INPUT_SOURCE_GAMEPAD;
static PyObject *__pyx_n_s_INPUT_SOURCE_KEYBOARD;
static PyObject *__pyx_n_s_INPUT_SOURCE_MOUSE;
static PyObject *__pyx_n_s_INPUT_SOURCE_NAV;
static PyObject *__pyx_n_s_INPUT_SOURCE_NONE;
static PyObject *__pyx_n_s_ITEM_BUTTON_REPEAT;
static PyObject *__pyx_n_s_ITEM_DEFAULT;
static PyObject *__pyx_n_s_ITEM_DISABLED;
static PyObject *__pyx_n_s_ITEM_MIXED_VALUE;
static PyObject *__pyx_n_s_ITEM_NONE;
static PyObject *__pyx_n_s_ITEM_NO_NAV;
static PyObject *__pyx_n_s_ITEM_NO_NAV_DEFAULT_FOCUS;
static PyObject *__pyx_n_s_ITEM_NO_TAB_STOP;
static PyObject *__pyx_n_s_ITEM_READ_ONLY;
static PyObject *__pyx_n_s_ITEM_SELECTABLE_DONT_CLOSE_POPUP;
static PyObject *__pyx_n_s_ITEM_STATUS_DEACTIVATED;
static PyObject *__pyx_n_s_ITEM_STATUS_EDITED;
static PyObject *__pyx_n_s_ITEM_STATUS_HAS_DEACTIVATED;
static PyObject *__pyx_n_s_ITEM_STATUS_HAS_DISPLAY_RECT;
static PyObject *__pyx_n_s_ITEM_STATUS_HOVERED_RECT;
static PyObject *__pyx_n_s_ITEM_STATUS_NONE;
static PyObject *__pyx_n_s_ITEM_STATUS_TOGGLED_OPEN;
static PyObject *__pyx_n_s_ITEM_STATUS_TOGGLED_SELECTION;
static PyObject *__pyx_n_s_ImGuiError;
static PyObject *__pyx_n_s_LAYOUT_TYPE_HORIZONTAL;
static PyObject *__pyx_n_s_LAYOUT_TYPE_VERTICAL;
static PyObject *__pyx_n_s_LOG_TYPE_LOG_TYPE_BUFFER;
static PyObject *__pyx_n_s_LOG_TYPE_LOG_TYPE_CLIPBOARD;
static PyObject *__pyx_n_s_LOG_TYPE_LOG_TYPE_FILE;
static PyObject *__pyx_n_s_LOG_TYPE_LOG_TYPE_TTY;
static PyObject *__pyx_n_s_LOG_TYPE_NONE;
static PyObject *__pyx_n_s_NAV_DIR_SOURCE_KEYBOARD;
static PyObject *__pyx_n_s_NAV_DIR_SOURCE_NONE;
static PyObject *__pyx_n_s_NAV_DIR_SOURCE_PAD_D_PAD;
static PyObject *__pyx_n_s_NAV_DIR_SOURCE_PAD_L_STICK;
static PyObject *__pyx_n_s_NAV_FORWARD_FORWARD_ACTIVE;
static PyObject *__pyx_n_s_NAV_FORWARD_FORWARD_QUEUED;
static PyObject *__pyx_n_s_NAV_FORWARD_NONE;
static PyObject *__pyx_n_s_NAV_HIGHLIGHT_ALWAYS_DRAW;
static PyObject *__pyx_n_s_NAV_HIGHLIGHT_NONE;
static PyObject *__pyx_n_s_NAV_HIGHLIGHT_NO_ROUNDING;
static PyObject *__pyx_n_s_NAV_HIGHLIGHT_TYPE_DEFAULT;
static PyObject *__pyx_n_s_NAV_HIGHLIGHT_TYPE_THIN;
static PyObject *__pyx_n_s_NAV_LAYER_COUNT;
static PyObject *__pyx_n_s_NAV_LAYER_MAIN;
static PyObject *__pyx_n_s_NAV_LAYER_MENU;
static PyObject *__pyx_n_s_NAV_MOVE_ALLOW_CURRENT_NAV_ID;
static PyObject *__pyx_n_s_NAV_MOVE_ALSO_SCORE_VISIBLE_SET;
static PyObject *__pyx_n_s_NAV_MOVE_LOOP_X;
static PyObject *__pyx_n_s_NAV_MOVE_LOOP_Y;
static PyObject *__pyx_n_s_NAV_MOVE_NONE;
static PyObject *__pyx_n_s_NAV_MOVE_SCROLL_TO_EDGE;
static PyObject *__pyx_n_s_NAV_MOVE_WRAP_X;
static PyObject *__pyx_n_s_NAV_MOVE_WRAP_Y;
static PyObject *__pyx_n_s_NEXT_ITEM_DATA_HAS_OPEN;
static PyObject *__pyx_n_s_NEXT_ITEM_DATA_HAS_WIDTH;
static PyObject *__pyx_n_s_NEXT_ITEM_DATA_NONE;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_BACKGROUND;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_COLLAPSED;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_CONTENT_SIZ;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_FOCUS;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_POS;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_SCROLL;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_SIZE;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_HAS_SIZE_CONSTR;
static PyObject *__pyx_n_s_NEXT_WINDOW_DATA_NONE;
static PyObject *__pyx_n_s_OLD_COLUMNS_GROW_PARENT_CONTENTS;
static PyObject *__pyx_n_s_OLD_COLUMNS_NONE;
static PyObject *__pyx_n_s_OLD_COLUMNS_NO_BORDER;
static PyObject *__pyx_n_s_OLD_COLUMNS_NO_FORCE_WIDTHIN_WIN;
static PyObject *__pyx_n_s_OLD_COLUMNS_NO_PRESERVE_WIDTHS;
static PyObject *__pyx_n_s_OLD_COLUMNS_NO_RESIZE;
static PyObject *__pyx_n_s_PLOT_TYPE_HISTOGRAM;
static PyObject *__pyx_n_s_PLOT_TYPE_LINES;
static PyObject *__pyx_n_s_POPUP_POSITION_POLICY_COMBO_BOX;
static PyObject *__pyx_n_s_POPUP_POSITION_POLICY_DEFAULT;
static PyObject *__pyx_n_s_POPUP_POSITION_POLICY_TOOLTIP;
static PyObject *__pyx_n_s_SELECTABLE_DRAW_HOVERED_WHEN_HEL;
static PyObject *__pyx_n_s_SELECTABLE_NO_HOLDING_ACTIVE_ID;
static PyObject *__pyx_n_s_SELECTABLE_NO_PAD_WIDHT_HALF_SPA;
static PyObject *__pyx_n_s_SELECTABLE_SELECT_ON_CLICK;
static PyObject *__pyx_n_s_SELECTABLE_SELECT_ON_RELEASE;
static PyObject *__pyx_n_s_SELECTABLE_SET_NAV_ID_ON_HOVER;
static PyObject *__pyx_n_s_SELECTABLE_SPAN_AVAILABLE_WIDTH;
static PyObject *__pyx_n_s_SEPARATOR_HORIZONTAL;
static PyObject *__pyx_n_s_SEPARATOR_NONE;
static PyObject *__pyx_n_s_SEPARATOR_SPAN_ALL_COLUMNS;
static PyObject *__pyx_n_s_SEPARATOR_VERTICAL;
static PyObject *__pyx_n_s_SLIDER_READ_ONLY;
static PyObject *__pyx_n_s_SLIDER_VERTICAL;
static PyObject *__pyx_n_s_TAB_BAR_DOCK_NODE;
static PyObject *__pyx_n_s_TAB_BAR_IS_FOCUSED;
static PyObject *__pyx_n_s_TAB_BAR_SAVE_SETTINGS;
static PyObject *__pyx_n_s_TAB_ITEM_BUTTON;
static PyObject *__pyx_n_s_TAB_ITEM_NO_CLOSE_BUTTON;
static PyObject *__pyx_n_s_TEXT_NONE;
static PyObject *__pyx_n_s_TEXT_NO_WIDTH_FRO_LARGE_CLIPPED;
static PyObject *__pyx_n_s_TOOLTIP_NONE;
static PyObject *__pyx_n_s_TOOLTIP_OVERRIDE_PREVIOUS_TOOLTI;
static PyObject *__pyx_n_s_TREE_NODE_CLIP_LABEL_FOR_TRAILIN;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Vec2;
static PyObject *__pyx_n_s_Vec4;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_gaiaengine_imgui_internal;
static PyObject *__pyx_kp_s_gaiaengine_imgui_internal_pyx;
static PyObject *__pyx_n_s_ignore;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_option;
static PyObject *__pyx_kp_s_pair_param_must_be_length_of_2;
static PyObject *__pyx_n_s_pop_item_flag;
static PyObject *__pyx_n_s_push_item_flag;
static PyObject *__pyx_kp_s_quadruple_param_must_be_length_o;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_pf_10gaiaengine_5imgui_8internal_push_item_flag(CYTHON_UNUSED PyObject *__pyx_self, ImGuiItemFlags __pyx_v_option, bool __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_10gaiaengine_5imgui_8internal_2pop_item_flag(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static __Pyx_CachedCFunction __pyx_umethod_PyString_Type_encode = {0, &__pyx_n_s_encode, 0, 0, 0};
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__6;
/* Late includes */
PyObject *ImGuiError = 0;

/* "gaiaengine/imgui/common.pyx":10
 * 
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

static PyObject *__pyx_f_10gaiaengine_5imgui_8internal__bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bytes", 0);

  /* "gaiaengine/imgui/common.pyx":11
 * 
 * cdef bytes _bytes(str text):
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_text, __pyx_kp_s_utf_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":10
 * 
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gaiaengine.imgui.internal._bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":14
 * 
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))
 * 
 */

static PyObject *__pyx_f_10gaiaengine_5imgui_8internal__from_bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_bytes", 0);

  /* "gaiaengine/imgui/common.pyx":15
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_errors, __pyx_n_s_ignore) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":14
 * 
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gaiaengine.imgui.internal._from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":18
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

static PyObject *__pyx_f_10gaiaengine_5imgui_8internal__cast_ImVec2_tuple(ImVec2 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec2_tuple", 0);

  /* "gaiaengine/imgui/common.pyx":19
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa
 *     return Vec2(vec.x, vec.y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":18
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gaiaengine.imgui.internal._cast_ImVec2_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":22
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_10gaiaengine_5imgui_8internal__cast_tuple_ImVec2(PyObject *__pyx_v_pair) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec2", 0);

  /* "gaiaengine/imgui/common.pyx":25
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "gaiaengine/imgui/common.pyx":26
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 26, __pyx_L1_error)

    /* "gaiaengine/imgui/common.pyx":25
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  }

  /* "gaiaengine/imgui/common.pyx":28
 *         raise ValueError("pair param must be length of 2")
 * 
 *     vec.x, vec.y = pair             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_pair))) || (PyList_CheckExact(__pyx_v_pair))) {
    PyObject* sequence = __pyx_v_pair;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 28, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_v_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 28, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vec.x = __pyx_t_7;
  __pyx_v_vec.y = __pyx_t_8;

  /* "gaiaengine/imgui/common.pyx":30
 *     vec.x, vec.y = pair
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":22
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gaiaengine.imgui.internal._cast_tuple_ImVec2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":33
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_10gaiaengine_5imgui_8internal__cast_args_ImVec2(float __pyx_v_x, float __pyx_v_y) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("_cast_args_ImVec2", 0);

  /* "gaiaengine/imgui/common.pyx":36
 *     cdef cimgui.ImVec2 vec
 * 
 *     vec.x, vec.y = x, y             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;

  /* "gaiaengine/imgui/common.pyx":38
 *     vec.x, vec.y = x, y
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":33
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":41
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_10gaiaengine_5imgui_8internal__cast_tuple_ImVec4(PyObject *__pyx_v_quadruple) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec4", 0);

  /* "gaiaengine/imgui/common.pyx":44
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_quadruple); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "gaiaengine/imgui/common.pyx":45
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 45, __pyx_L1_error)

    /* "gaiaengine/imgui/common.pyx":44
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  }

  /* "gaiaengine/imgui/common.pyx":47
 *         raise ValueError("quadruple param must be length of 4")
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_quadruple))) || (PyList_CheckExact(__pyx_v_quadruple))) {
    PyObject* sequence = __pyx_v_quadruple;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 47, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_v_quadruple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 47, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_vec.x = __pyx_t_9;
  __pyx_v_vec.y = __pyx_t_10;
  __pyx_v_vec.z = __pyx_t_11;
  __pyx_v_vec.w = __pyx_t_12;

  /* "gaiaengine/imgui/common.pyx":49
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":41
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("gaiaengine.imgui.internal._cast_tuple_ImVec4", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":52
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_10gaiaengine_5imgui_8internal__cast_args_ImVec4(float __pyx_v_x, float __pyx_v_y, float __pyx_v_z, float __pyx_v_w) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  __Pyx_RefNannySetupContext("_cast_args_ImVec4", 0);

  /* "gaiaengine/imgui/common.pyx":55
 *     cdef cimgui.ImVec4 vec
 * 
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_t_3 = __pyx_v_z;
  __pyx_t_4 = __pyx_v_w;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;
  __pyx_v_vec.z = __pyx_t_3;
  __pyx_v_vec.w = __pyx_t_4;

  /* "gaiaengine/imgui/common.pyx":57
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":52
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/common.pyx":60
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

static PyObject *__pyx_f_10gaiaengine_5imgui_8internal__cast_ImVec4_tuple(ImVec4 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec4_tuple", 0);

  /* "gaiaengine/imgui/common.pyx":61
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gaiaengine/imgui/common.pyx":60
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("gaiaengine.imgui.internal._cast_ImVec4_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/internal.pyx":13
 * include "common.pyx"
 * 
 * cdef UpdateImGuiContext(cimgui.ImGuiContext* _ptr):             # <<<<<<<<<<<<<<
 *     cimgui.SetCurrentContext(_ptr)
 * 
 */

static PyObject *__pyx_f_10gaiaengine_5imgui_8internal_UpdateImGuiContext(ImGuiContext *__pyx_v__ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("UpdateImGuiContext", 0);

  /* "gaiaengine/imgui/internal.pyx":14
 * 
 * cdef UpdateImGuiContext(cimgui.ImGuiContext* _ptr):
 *     cimgui.SetCurrentContext(_ptr)             # <<<<<<<<<<<<<<
 * 
 * # === Enums ===
 */
  try {
    ImGui::SetCurrentContext(__pyx_v__ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 14, __pyx_L1_error)
  }

  /* "gaiaengine/imgui/internal.pyx":13
 * include "common.pyx"
 * 
 * cdef UpdateImGuiContext(cimgui.ImGuiContext* _ptr):             # <<<<<<<<<<<<<<
 *     cimgui.SetCurrentContext(_ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gaiaengine.imgui.internal.UpdateImGuiContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/internal.pyx":199
 * # === API ===
 * 
 * def push_item_flag(internal.ImGuiItemFlags option, bool enabled):             # <<<<<<<<<<<<<<
 *     # TODO: document
 *     internal.PushItemFlag(option, enabled)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10gaiaengine_5imgui_8internal_1push_item_flag(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10gaiaengine_5imgui_8internal_push_item_flag[] = "push_item_flag(ImGuiItemFlags option, bool enabled)";
static PyMethodDef __pyx_mdef_10gaiaengine_5imgui_8internal_1push_item_flag = {"push_item_flag", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10gaiaengine_5imgui_8internal_1push_item_flag, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10gaiaengine_5imgui_8internal_push_item_flag};
static PyObject *__pyx_pw_10gaiaengine_5imgui_8internal_1push_item_flag(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiItemFlags __pyx_v_option;
  bool __pyx_v_enabled;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_item_flag (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_option,&__pyx_n_s_enabled,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_option)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_item_flag", 1, 2, 2, 1); __PYX_ERR(1, 199, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_item_flag") < 0)) __PYX_ERR(1, 199, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_option = __Pyx_PyInt_As_ImGuiItemFlags(values[0]); if (unlikely((__pyx_v_option == ((ImGuiItemFlags)-1)) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L3_error)
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enabled == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_item_flag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gaiaengine.imgui.internal.push_item_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10gaiaengine_5imgui_8internal_push_item_flag(__pyx_self, __pyx_v_option, __pyx_v_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10gaiaengine_5imgui_8internal_push_item_flag(CYTHON_UNUSED PyObject *__pyx_self, ImGuiItemFlags __pyx_v_option, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_item_flag", 0);

  /* "gaiaengine/imgui/internal.pyx":201
 * def push_item_flag(internal.ImGuiItemFlags option, bool enabled):
 *     # TODO: document
 *     internal.PushItemFlag(option, enabled)             # <<<<<<<<<<<<<<
 * 
 * def pop_item_flag():
 */
  try {
    ImGui::PushItemFlag(__pyx_v_option, __pyx_v_enabled);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 201, __pyx_L1_error)
  }

  /* "gaiaengine/imgui/internal.pyx":199
 * # === API ===
 * 
 * def push_item_flag(internal.ImGuiItemFlags option, bool enabled):             # <<<<<<<<<<<<<<
 *     # TODO: document
 *     internal.PushItemFlag(option, enabled)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gaiaengine.imgui.internal.push_item_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gaiaengine/imgui/internal.pyx":203
 *     internal.PushItemFlag(option, enabled)
 * 
 * def pop_item_flag():             # <<<<<<<<<<<<<<
 *     internal.PopItemFlag()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10gaiaengine_5imgui_8internal_3pop_item_flag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10gaiaengine_5imgui_8internal_2pop_item_flag[] = "pop_item_flag()";
static PyMethodDef __pyx_mdef_10gaiaengine_5imgui_8internal_3pop_item_flag = {"pop_item_flag", (PyCFunction)__pyx_pw_10gaiaengine_5imgui_8internal_3pop_item_flag, METH_NOARGS, __pyx_doc_10gaiaengine_5imgui_8internal_2pop_item_flag};
static PyObject *__pyx_pw_10gaiaengine_5imgui_8internal_3pop_item_flag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_item_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_10gaiaengine_5imgui_8internal_2pop_item_flag(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10gaiaengine_5imgui_8internal_2pop_item_flag(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_item_flag", 0);

  /* "gaiaengine/imgui/internal.pyx":204
 * 
 * def pop_item_flag():
 *     internal.PopItemFlag()             # <<<<<<<<<<<<<<
 */
  try {
    ImGui::PopItemFlag();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 204, __pyx_L1_error)
  }

  /* "gaiaengine/imgui/internal.pyx":203
 *     internal.PushItemFlag(option, enabled)
 * 
 * def pop_item_flag():             # <<<<<<<<<<<<<<
 *     internal.PopItemFlag()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gaiaengine.imgui.internal.pop_item_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_internal(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_internal},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "internal",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AXIS_NONE, __pyx_k_AXIS_NONE, sizeof(__pyx_k_AXIS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_AXIS_X, __pyx_k_AXIS_X, sizeof(__pyx_k_AXIS_X), 0, 0, 1, 1},
  {&__pyx_n_s_AXIS_Y, __pyx_k_AXIS_Y, sizeof(__pyx_k_AXIS_Y), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_ALIGN_TEXT_BASE_LINE, __pyx_k_BUTTON_ALIGN_TEXT_BASE_LINE, sizeof(__pyx_k_BUTTON_ALIGN_TEXT_BASE_LINE), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_ALLOW_ITEM_OVERLAP, __pyx_k_BUTTON_ALLOW_ITEM_OVERLAP, sizeof(__pyx_k_BUTTON_ALLOW_ITEM_OVERLAP), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_DISABLED, __pyx_k_BUTTON_DISABLED, sizeof(__pyx_k_BUTTON_DISABLED), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_DONT_CLOSE_POPUPS, __pyx_k_BUTTON_DONT_CLOSE_POPUPS, sizeof(__pyx_k_BUTTON_DONT_CLOSE_POPUPS), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_FLATTEN_CHILDREN, __pyx_k_BUTTON_FLATTEN_CHILDREN, sizeof(__pyx_k_BUTTON_FLATTEN_CHILDREN), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_NO_HOLDING_ACTIVE_ID, __pyx_k_BUTTON_NO_HOLDING_ACTIVE_ID, sizeof(__pyx_k_BUTTON_NO_HOLDING_ACTIVE_ID), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_NO_HOVERED_ON_FOCUS, __pyx_k_BUTTON_NO_HOVERED_ON_FOCUS, sizeof(__pyx_k_BUTTON_NO_HOVERED_ON_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_NO_KEY_MODIFIERS, __pyx_k_BUTTON_NO_KEY_MODIFIERS, sizeof(__pyx_k_BUTTON_NO_KEY_MODIFIERS), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_NO_NAV_FOCUS, __pyx_k_BUTTON_NO_NAV_FOCUS, sizeof(__pyx_k_BUTTON_NO_NAV_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_CLICK, __pyx_k_BUTTON_PRESSED_ON_CLICK, sizeof(__pyx_k_BUTTON_PRESSED_ON_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_CLICK_RELEASE, __pyx_k_BUTTON_PRESSED_ON_CLICK_RELEASE, sizeof(__pyx_k_BUTTON_PRESSED_ON_CLICK_RELEASE), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_CLICK_RELEASE_2, __pyx_k_BUTTON_PRESSED_ON_CLICK_RELEASE_2, sizeof(__pyx_k_BUTTON_PRESSED_ON_CLICK_RELEASE_2), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_DEFAULT, __pyx_k_BUTTON_PRESSED_ON_DEFAULT, sizeof(__pyx_k_BUTTON_PRESSED_ON_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_DOUBLE_CLICK, __pyx_k_BUTTON_PRESSED_ON_DOUBLE_CLICK, sizeof(__pyx_k_BUTTON_PRESSED_ON_DOUBLE_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_DRAG_DROP_HOLD, __pyx_k_BUTTON_PRESSED_ON_DRAG_DROP_HOLD, sizeof(__pyx_k_BUTTON_PRESSED_ON_DRAG_DROP_HOLD), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_MASK, __pyx_k_BUTTON_PRESSED_ON_MASK, sizeof(__pyx_k_BUTTON_PRESSED_ON_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_PRESSED_ON_RELEASE, __pyx_k_BUTTON_PRESSED_ON_RELEASE, sizeof(__pyx_k_BUTTON_PRESSED_ON_RELEASE), 0, 0, 1, 1},
  {&__pyx_n_s_BUTTON_REPEAT, __pyx_k_BUTTON_REPEAT, sizeof(__pyx_k_BUTTON_REPEAT), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_READ_MODE_DOWN, __pyx_k_INPUT_READ_MODE_DOWN, sizeof(__pyx_k_INPUT_READ_MODE_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_READ_MODE_PRESSED, __pyx_k_INPUT_READ_MODE_PRESSED, sizeof(__pyx_k_INPUT_READ_MODE_PRESSED), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_READ_MODE_RELEASED, __pyx_k_INPUT_READ_MODE_RELEASED, sizeof(__pyx_k_INPUT_READ_MODE_RELEASED), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_READ_MODE_REPEAT, __pyx_k_INPUT_READ_MODE_REPEAT, sizeof(__pyx_k_INPUT_READ_MODE_REPEAT), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_READ_MODE_REPEAT_FAST, __pyx_k_INPUT_READ_MODE_REPEAT_FAST, sizeof(__pyx_k_INPUT_READ_MODE_REPEAT_FAST), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_READ_MODE_REPEAT_SLOW, __pyx_k_INPUT_READ_MODE_REPEAT_SLOW, sizeof(__pyx_k_INPUT_READ_MODE_REPEAT_SLOW), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_SOURCE_COUNT, __pyx_k_INPUT_SOURCE_COUNT, sizeof(__pyx_k_INPUT_SOURCE_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_SOURCE_GAMEPAD, __pyx_k_INPUT_SOURCE_GAMEPAD, sizeof(__pyx_k_INPUT_SOURCE_GAMEPAD), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_SOURCE_KEYBOARD, __pyx_k_INPUT_SOURCE_KEYBOARD, sizeof(__pyx_k_INPUT_SOURCE_KEYBOARD), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_SOURCE_MOUSE, __pyx_k_INPUT_SOURCE_MOUSE, sizeof(__pyx_k_INPUT_SOURCE_MOUSE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_SOURCE_NAV, __pyx_k_INPUT_SOURCE_NAV, sizeof(__pyx_k_INPUT_SOURCE_NAV), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_SOURCE_NONE, __pyx_k_INPUT_SOURCE_NONE, sizeof(__pyx_k_INPUT_SOURCE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_BUTTON_REPEAT, __pyx_k_ITEM_BUTTON_REPEAT, sizeof(__pyx_k_ITEM_BUTTON_REPEAT), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_DEFAULT, __pyx_k_ITEM_DEFAULT, sizeof(__pyx_k_ITEM_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_DISABLED, __pyx_k_ITEM_DISABLED, sizeof(__pyx_k_ITEM_DISABLED), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_MIXED_VALUE, __pyx_k_ITEM_MIXED_VALUE, sizeof(__pyx_k_ITEM_MIXED_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_NONE, __pyx_k_ITEM_NONE, sizeof(__pyx_k_ITEM_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_NO_NAV, __pyx_k_ITEM_NO_NAV, sizeof(__pyx_k_ITEM_NO_NAV), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_NO_NAV_DEFAULT_FOCUS, __pyx_k_ITEM_NO_NAV_DEFAULT_FOCUS, sizeof(__pyx_k_ITEM_NO_NAV_DEFAULT_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_NO_TAB_STOP, __pyx_k_ITEM_NO_TAB_STOP, sizeof(__pyx_k_ITEM_NO_TAB_STOP), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_READ_ONLY, __pyx_k_ITEM_READ_ONLY, sizeof(__pyx_k_ITEM_READ_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_SELECTABLE_DONT_CLOSE_POPUP, __pyx_k_ITEM_SELECTABLE_DONT_CLOSE_POPUP, sizeof(__pyx_k_ITEM_SELECTABLE_DONT_CLOSE_POPUP), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_DEACTIVATED, __pyx_k_ITEM_STATUS_DEACTIVATED, sizeof(__pyx_k_ITEM_STATUS_DEACTIVATED), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_EDITED, __pyx_k_ITEM_STATUS_EDITED, sizeof(__pyx_k_ITEM_STATUS_EDITED), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_HAS_DEACTIVATED, __pyx_k_ITEM_STATUS_HAS_DEACTIVATED, sizeof(__pyx_k_ITEM_STATUS_HAS_DEACTIVATED), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_HAS_DISPLAY_RECT, __pyx_k_ITEM_STATUS_HAS_DISPLAY_RECT, sizeof(__pyx_k_ITEM_STATUS_HAS_DISPLAY_RECT), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_HOVERED_RECT, __pyx_k_ITEM_STATUS_HOVERED_RECT, sizeof(__pyx_k_ITEM_STATUS_HOVERED_RECT), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_NONE, __pyx_k_ITEM_STATUS_NONE, sizeof(__pyx_k_ITEM_STATUS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_TOGGLED_OPEN, __pyx_k_ITEM_STATUS_TOGGLED_OPEN, sizeof(__pyx_k_ITEM_STATUS_TOGGLED_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM_STATUS_TOGGLED_SELECTION, __pyx_k_ITEM_STATUS_TOGGLED_SELECTION, sizeof(__pyx_k_ITEM_STATUS_TOGGLED_SELECTION), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiError, __pyx_k_ImGuiError, sizeof(__pyx_k_ImGuiError), 0, 0, 1, 1},
  {&__pyx_n_s_LAYOUT_TYPE_HORIZONTAL, __pyx_k_LAYOUT_TYPE_HORIZONTAL, sizeof(__pyx_k_LAYOUT_TYPE_HORIZONTAL), 0, 0, 1, 1},
  {&__pyx_n_s_LAYOUT_TYPE_VERTICAL, __pyx_k_LAYOUT_TYPE_VERTICAL, sizeof(__pyx_k_LAYOUT_TYPE_VERTICAL), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_TYPE_LOG_TYPE_BUFFER, __pyx_k_LOG_TYPE_LOG_TYPE_BUFFER, sizeof(__pyx_k_LOG_TYPE_LOG_TYPE_BUFFER), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_TYPE_LOG_TYPE_CLIPBOARD, __pyx_k_LOG_TYPE_LOG_TYPE_CLIPBOARD, sizeof(__pyx_k_LOG_TYPE_LOG_TYPE_CLIPBOARD), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_TYPE_LOG_TYPE_FILE, __pyx_k_LOG_TYPE_LOG_TYPE_FILE, sizeof(__pyx_k_LOG_TYPE_LOG_TYPE_FILE), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_TYPE_LOG_TYPE_TTY, __pyx_k_LOG_TYPE_LOG_TYPE_TTY, sizeof(__pyx_k_LOG_TYPE_LOG_TYPE_TTY), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_TYPE_NONE, __pyx_k_LOG_TYPE_NONE, sizeof(__pyx_k_LOG_TYPE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_DIR_SOURCE_KEYBOARD, __pyx_k_NAV_DIR_SOURCE_KEYBOARD, sizeof(__pyx_k_NAV_DIR_SOURCE_KEYBOARD), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_DIR_SOURCE_NONE, __pyx_k_NAV_DIR_SOURCE_NONE, sizeof(__pyx_k_NAV_DIR_SOURCE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_DIR_SOURCE_PAD_D_PAD, __pyx_k_NAV_DIR_SOURCE_PAD_D_PAD, sizeof(__pyx_k_NAV_DIR_SOURCE_PAD_D_PAD), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_DIR_SOURCE_PAD_L_STICK, __pyx_k_NAV_DIR_SOURCE_PAD_L_STICK, sizeof(__pyx_k_NAV_DIR_SOURCE_PAD_L_STICK), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_FORWARD_FORWARD_ACTIVE, __pyx_k_NAV_FORWARD_FORWARD_ACTIVE, sizeof(__pyx_k_NAV_FORWARD_FORWARD_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_FORWARD_FORWARD_QUEUED, __pyx_k_NAV_FORWARD_FORWARD_QUEUED, sizeof(__pyx_k_NAV_FORWARD_FORWARD_QUEUED), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_FORWARD_NONE, __pyx_k_NAV_FORWARD_NONE, sizeof(__pyx_k_NAV_FORWARD_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_HIGHLIGHT_ALWAYS_DRAW, __pyx_k_NAV_HIGHLIGHT_ALWAYS_DRAW, sizeof(__pyx_k_NAV_HIGHLIGHT_ALWAYS_DRAW), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_HIGHLIGHT_NONE, __pyx_k_NAV_HIGHLIGHT_NONE, sizeof(__pyx_k_NAV_HIGHLIGHT_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_HIGHLIGHT_NO_ROUNDING, __pyx_k_NAV_HIGHLIGHT_NO_ROUNDING, sizeof(__pyx_k_NAV_HIGHLIGHT_NO_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_HIGHLIGHT_TYPE_DEFAULT, __pyx_k_NAV_HIGHLIGHT_TYPE_DEFAULT, sizeof(__pyx_k_NAV_HIGHLIGHT_TYPE_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_HIGHLIGHT_TYPE_THIN, __pyx_k_NAV_HIGHLIGHT_TYPE_THIN, sizeof(__pyx_k_NAV_HIGHLIGHT_TYPE_THIN), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_LAYER_COUNT, __pyx_k_NAV_LAYER_COUNT, sizeof(__pyx_k_NAV_LAYER_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_LAYER_MAIN, __pyx_k_NAV_LAYER_MAIN, sizeof(__pyx_k_NAV_LAYER_MAIN), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_LAYER_MENU, __pyx_k_NAV_LAYER_MENU, sizeof(__pyx_k_NAV_LAYER_MENU), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_ALLOW_CURRENT_NAV_ID, __pyx_k_NAV_MOVE_ALLOW_CURRENT_NAV_ID, sizeof(__pyx_k_NAV_MOVE_ALLOW_CURRENT_NAV_ID), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_ALSO_SCORE_VISIBLE_SET, __pyx_k_NAV_MOVE_ALSO_SCORE_VISIBLE_SET, sizeof(__pyx_k_NAV_MOVE_ALSO_SCORE_VISIBLE_SET), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_LOOP_X, __pyx_k_NAV_MOVE_LOOP_X, sizeof(__pyx_k_NAV_MOVE_LOOP_X), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_LOOP_Y, __pyx_k_NAV_MOVE_LOOP_Y, sizeof(__pyx_k_NAV_MOVE_LOOP_Y), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_NONE, __pyx_k_NAV_MOVE_NONE, sizeof(__pyx_k_NAV_MOVE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_SCROLL_TO_EDGE, __pyx_k_NAV_MOVE_SCROLL_TO_EDGE, sizeof(__pyx_k_NAV_MOVE_SCROLL_TO_EDGE), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_WRAP_X, __pyx_k_NAV_MOVE_WRAP_X, sizeof(__pyx_k_NAV_MOVE_WRAP_X), 0, 0, 1, 1},
  {&__pyx_n_s_NAV_MOVE_WRAP_Y, __pyx_k_NAV_MOVE_WRAP_Y, sizeof(__pyx_k_NAV_MOVE_WRAP_Y), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_ITEM_DATA_HAS_OPEN, __pyx_k_NEXT_ITEM_DATA_HAS_OPEN, sizeof(__pyx_k_NEXT_ITEM_DATA_HAS_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_ITEM_DATA_HAS_WIDTH, __pyx_k_NEXT_ITEM_DATA_HAS_WIDTH, sizeof(__pyx_k_NEXT_ITEM_DATA_HAS_WIDTH), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_ITEM_DATA_NONE, __pyx_k_NEXT_ITEM_DATA_NONE, sizeof(__pyx_k_NEXT_ITEM_DATA_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_BACKGROUND, __pyx_k_NEXT_WINDOW_DATA_HAS_BACKGROUND, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_COLLAPSED, __pyx_k_NEXT_WINDOW_DATA_HAS_COLLAPSED, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_COLLAPSED), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_CONTENT_SIZ, __pyx_k_NEXT_WINDOW_DATA_HAS_CONTENT_SIZ, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_CONTENT_SIZ), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_FOCUS, __pyx_k_NEXT_WINDOW_DATA_HAS_FOCUS, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_POS, __pyx_k_NEXT_WINDOW_DATA_HAS_POS, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_POS), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_SCROLL, __pyx_k_NEXT_WINDOW_DATA_HAS_SCROLL, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_SCROLL), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_SIZE, __pyx_k_NEXT_WINDOW_DATA_HAS_SIZE, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_HAS_SIZE_CONSTR, __pyx_k_NEXT_WINDOW_DATA_HAS_SIZE_CONSTR, sizeof(__pyx_k_NEXT_WINDOW_DATA_HAS_SIZE_CONSTR), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_WINDOW_DATA_NONE, __pyx_k_NEXT_WINDOW_DATA_NONE, sizeof(__pyx_k_NEXT_WINDOW_DATA_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_OLD_COLUMNS_GROW_PARENT_CONTENTS, __pyx_k_OLD_COLUMNS_GROW_PARENT_CONTENTS, sizeof(__pyx_k_OLD_COLUMNS_GROW_PARENT_CONTENTS), 0, 0, 1, 1},
  {&__pyx_n_s_OLD_COLUMNS_NONE, __pyx_k_OLD_COLUMNS_NONE, sizeof(__pyx_k_OLD_COLUMNS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_OLD_COLUMNS_NO_BORDER, __pyx_k_OLD_COLUMNS_NO_BORDER, sizeof(__pyx_k_OLD_COLUMNS_NO_BORDER), 0, 0, 1, 1},
  {&__pyx_n_s_OLD_COLUMNS_NO_FORCE_WIDTHIN_WIN, __pyx_k_OLD_COLUMNS_NO_FORCE_WIDTHIN_WIN, sizeof(__pyx_k_OLD_COLUMNS_NO_FORCE_WIDTHIN_WIN), 0, 0, 1, 1},
  {&__pyx_n_s_OLD_COLUMNS_NO_PRESERVE_WIDTHS, __pyx_k_OLD_COLUMNS_NO_PRESERVE_WIDTHS, sizeof(__pyx_k_OLD_COLUMNS_NO_PRESERVE_WIDTHS), 0, 0, 1, 1},
  {&__pyx_n_s_OLD_COLUMNS_NO_RESIZE, __pyx_k_OLD_COLUMNS_NO_RESIZE, sizeof(__pyx_k_OLD_COLUMNS_NO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_PLOT_TYPE_HISTOGRAM, __pyx_k_PLOT_TYPE_HISTOGRAM, sizeof(__pyx_k_PLOT_TYPE_HISTOGRAM), 0, 0, 1, 1},
  {&__pyx_n_s_PLOT_TYPE_LINES, __pyx_k_PLOT_TYPE_LINES, sizeof(__pyx_k_PLOT_TYPE_LINES), 0, 0, 1, 1},
  {&__pyx_n_s_POPUP_POSITION_POLICY_COMBO_BOX, __pyx_k_POPUP_POSITION_POLICY_COMBO_BOX, sizeof(__pyx_k_POPUP_POSITION_POLICY_COMBO_BOX), 0, 0, 1, 1},
  {&__pyx_n_s_POPUP_POSITION_POLICY_DEFAULT, __pyx_k_POPUP_POSITION_POLICY_DEFAULT, sizeof(__pyx_k_POPUP_POSITION_POLICY_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_POPUP_POSITION_POLICY_TOOLTIP, __pyx_k_POPUP_POSITION_POLICY_TOOLTIP, sizeof(__pyx_k_POPUP_POSITION_POLICY_TOOLTIP), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_DRAW_HOVERED_WHEN_HEL, __pyx_k_SELECTABLE_DRAW_HOVERED_WHEN_HEL, sizeof(__pyx_k_SELECTABLE_DRAW_HOVERED_WHEN_HEL), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_NO_HOLDING_ACTIVE_ID, __pyx_k_SELECTABLE_NO_HOLDING_ACTIVE_ID, sizeof(__pyx_k_SELECTABLE_NO_HOLDING_ACTIVE_ID), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_NO_PAD_WIDHT_HALF_SPA, __pyx_k_SELECTABLE_NO_PAD_WIDHT_HALF_SPA, sizeof(__pyx_k_SELECTABLE_NO_PAD_WIDHT_HALF_SPA), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_SELECT_ON_CLICK, __pyx_k_SELECTABLE_SELECT_ON_CLICK, sizeof(__pyx_k_SELECTABLE_SELECT_ON_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_SELECT_ON_RELEASE, __pyx_k_SELECTABLE_SELECT_ON_RELEASE, sizeof(__pyx_k_SELECTABLE_SELECT_ON_RELEASE), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_SET_NAV_ID_ON_HOVER, __pyx_k_SELECTABLE_SET_NAV_ID_ON_HOVER, sizeof(__pyx_k_SELECTABLE_SET_NAV_ID_ON_HOVER), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_SPAN_AVAILABLE_WIDTH, __pyx_k_SELECTABLE_SPAN_AVAILABLE_WIDTH, sizeof(__pyx_k_SELECTABLE_SPAN_AVAILABLE_WIDTH), 0, 0, 1, 1},
  {&__pyx_n_s_SEPARATOR_HORIZONTAL, __pyx_k_SEPARATOR_HORIZONTAL, sizeof(__pyx_k_SEPARATOR_HORIZONTAL), 0, 0, 1, 1},
  {&__pyx_n_s_SEPARATOR_NONE, __pyx_k_SEPARATOR_NONE, sizeof(__pyx_k_SEPARATOR_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_SEPARATOR_SPAN_ALL_COLUMNS, __pyx_k_SEPARATOR_SPAN_ALL_COLUMNS, sizeof(__pyx_k_SEPARATOR_SPAN_ALL_COLUMNS), 0, 0, 1, 1},
  {&__pyx_n_s_SEPARATOR_VERTICAL, __pyx_k_SEPARATOR_VERTICAL, sizeof(__pyx_k_SEPARATOR_VERTICAL), 0, 0, 1, 1},
  {&__pyx_n_s_SLIDER_READ_ONLY, __pyx_k_SLIDER_READ_ONLY, sizeof(__pyx_k_SLIDER_READ_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_SLIDER_VERTICAL, __pyx_k_SLIDER_VERTICAL, sizeof(__pyx_k_SLIDER_VERTICAL), 0, 0, 1, 1},
  {&__pyx_n_s_TAB_BAR_DOCK_NODE, __pyx_k_TAB_BAR_DOCK_NODE, sizeof(__pyx_k_TAB_BAR_DOCK_NODE), 0, 0, 1, 1},
  {&__pyx_n_s_TAB_BAR_IS_FOCUSED, __pyx_k_TAB_BAR_IS_FOCUSED, sizeof(__pyx_k_TAB_BAR_IS_FOCUSED), 0, 0, 1, 1},
  {&__pyx_n_s_TAB_BAR_SAVE_SETTINGS, __pyx_k_TAB_BAR_SAVE_SETTINGS, sizeof(__pyx_k_TAB_BAR_SAVE_SETTINGS), 0, 0, 1, 1},
  {&__pyx_n_s_TAB_ITEM_BUTTON, __pyx_k_TAB_ITEM_BUTTON, sizeof(__pyx_k_TAB_ITEM_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_TAB_ITEM_NO_CLOSE_BUTTON, __pyx_k_TAB_ITEM_NO_CLOSE_BUTTON, sizeof(__pyx_k_TAB_ITEM_NO_CLOSE_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_TEXT_NONE, __pyx_k_TEXT_NONE, sizeof(__pyx_k_TEXT_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_TEXT_NO_WIDTH_FRO_LARGE_CLIPPED, __pyx_k_TEXT_NO_WIDTH_FRO_LARGE_CLIPPED, sizeof(__pyx_k_TEXT_NO_WIDTH_FRO_LARGE_CLIPPED), 0, 0, 1, 1},
  {&__pyx_n_s_TOOLTIP_NONE, __pyx_k_TOOLTIP_NONE, sizeof(__pyx_k_TOOLTIP_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_TOOLTIP_OVERRIDE_PREVIOUS_TOOLTI, __pyx_k_TOOLTIP_OVERRIDE_PREVIOUS_TOOLTI, sizeof(__pyx_k_TOOLTIP_OVERRIDE_PREVIOUS_TOOLTI), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_CLIP_LABEL_FOR_TRAILIN, __pyx_k_TREE_NODE_CLIP_LABEL_FOR_TRAILIN, sizeof(__pyx_k_TREE_NODE_CLIP_LABEL_FOR_TRAILIN), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 0, 1, 1},
  {&__pyx_n_s_Vec4, __pyx_k_Vec4, sizeof(__pyx_k_Vec4), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_gaiaengine_imgui_internal, __pyx_k_gaiaengine_imgui_internal, sizeof(__pyx_k_gaiaengine_imgui_internal), 0, 0, 1, 1},
  {&__pyx_kp_s_gaiaengine_imgui_internal_pyx, __pyx_k_gaiaengine_imgui_internal_pyx, sizeof(__pyx_k_gaiaengine_imgui_internal_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_option, __pyx_k_option, sizeof(__pyx_k_option), 0, 0, 1, 1},
  {&__pyx_kp_s_pair_param_must_be_length_of_2, __pyx_k_pair_param_must_be_length_of_2, sizeof(__pyx_k_pair_param_must_be_length_of_2), 0, 0, 1, 0},
  {&__pyx_n_s_pop_item_flag, __pyx_k_pop_item_flag, sizeof(__pyx_k_pop_item_flag), 0, 0, 1, 1},
  {&__pyx_n_s_push_item_flag, __pyx_k_push_item_flag, sizeof(__pyx_k_push_item_flag), 0, 0, 1, 1},
  {&__pyx_kp_s_quadruple_param_must_be_length_o, __pyx_k_quadruple_param_must_be_length_o, sizeof(__pyx_k_quadruple_param_must_be_length_o), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 26, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "gaiaengine/imgui/common.pyx":15
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "gaiaengine/imgui/common.pyx":26
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_pair_param_must_be_length_of_2); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "gaiaengine/imgui/common.pyx":45
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_quadruple_param_must_be_length_o); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "gaiaengine/imgui/internal.pyx":199
 * # === API ===
 * 
 * def push_item_flag(internal.ImGuiItemFlags option, bool enabled):             # <<<<<<<<<<<<<<
 *     # TODO: document
 *     internal.PushItemFlag(option, enabled)
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_n_s_option, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_gaiaengine_imgui_internal_pyx, __pyx_n_s_push_item_flag, 199, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(1, 199, __pyx_L1_error)

  /* "gaiaengine/imgui/internal.pyx":203
 *     internal.PushItemFlag(option, enabled)
 * 
 * def pop_item_flag():             # <<<<<<<<<<<<<<
 *     internal.PopItemFlag()
 */
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_gaiaengine_imgui_internal_pyx, __pyx_n_s_pop_item_flag, 203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(1, 203, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyString_Type_encode.type = (PyObject*)&PyString_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  ImGuiError = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("UpdateImGuiContext", (void (*)(void))__pyx_f_10gaiaengine_5imgui_8internal_UpdateImGuiContext, "PyObject *(ImGuiContext *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initinternal(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initinternal(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_internal(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_internal(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_internal(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'internal' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_internal(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("internal", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_gaiaengine__imgui__internal) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "gaiaengine.imgui.internal")) {
      if (unlikely(PyDict_SetItemString(modules, "gaiaengine.imgui.internal", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "gaiaengine/imgui/common.pyx":4
 * # cython: linetrace=True
 * 
 * from collections import namedtuple             # <<<<<<<<<<<<<<
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_namedtuple);
  __Pyx_GIVEREF(__pyx_n_s_namedtuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_namedtuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_namedtuple, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/common.pyx":6
 * from collections import namedtuple
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])             # <<<<<<<<<<<<<<
 * Vec4 = namedtuple("Vec4", ['x', 'y', 'z', 'w'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_y);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Vec2);
  __Pyx_GIVEREF(__pyx_n_s_Vec2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Vec2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec2, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gaiaengine/imgui/common.pyx":7
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])
 * Vec4 = namedtuple("Vec4", ['x', 'y', 'z', 'w'])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_y);
  __Pyx_INCREF(__pyx_n_s_z);
  __Pyx_GIVEREF(__pyx_n_s_z);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_z);
  __Pyx_INCREF(__pyx_n_s_w);
  __Pyx_GIVEREF(__pyx_n_s_w);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_n_s_w);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Vec4);
  __Pyx_GIVEREF(__pyx_n_s_Vec4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Vec4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec4, __pyx_t_3) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gaiaengine/imgui/common.pyx":69
 * 
 * cdef public _ImGuiError "ImGuiError" = PyErr_NewException(
 *     "imgui.core.ImGuiError", Exception, {}             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gaiaengine/imgui/common.pyx":68
 * from cpython.exc cimport PyErr_NewException
 * 
 * cdef public _ImGuiError "ImGuiError" = PyErr_NewException(             # <<<<<<<<<<<<<<
 *     "imgui.core.ImGuiError", Exception, {}
 * )
 */
  __pyx_t_2 = PyErr_NewException(((char *)"imgui.core.ImGuiError"), ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(ImGuiError);
  __Pyx_DECREF_SET(ImGuiError, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gaiaengine/imgui/common.pyx":72
 * )
 * 
 * ImGuiError = _ImGuiError # make visible to Python             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ImGuiError, ImGuiError) < 0) __PYX_ERR(0, 72, __pyx_L1_error)

  /* "gaiaengine/imgui/internal.pyx":19
 * 
 * # Item Flags
 * ITEM_NONE = enums_internal.ImGuiItemFlags_None             # <<<<<<<<<<<<<<
 * ITEM_NO_TAB_STOP = enums_internal.ImGuiItemFlags_NoTabStop
 * ITEM_BUTTON_REPEAT = enums_internal.ImGuiItemFlags_ButtonRepeat
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":20
 * # Item Flags
 * ITEM_NONE = enums_internal.ImGuiItemFlags_None
 * ITEM_NO_TAB_STOP = enums_internal.ImGuiItemFlags_NoTabStop             # <<<<<<<<<<<<<<
 * ITEM_BUTTON_REPEAT = enums_internal.ImGuiItemFlags_ButtonRepeat
 * ITEM_DISABLED = enums_internal.ImGuiItemFlags_Disabled
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_NoTabStop); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_NO_TAB_STOP, __pyx_t_2) < 0) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":21
 * ITEM_NONE = enums_internal.ImGuiItemFlags_None
 * ITEM_NO_TAB_STOP = enums_internal.ImGuiItemFlags_NoTabStop
 * ITEM_BUTTON_REPEAT = enums_internal.ImGuiItemFlags_ButtonRepeat             # <<<<<<<<<<<<<<
 * ITEM_DISABLED = enums_internal.ImGuiItemFlags_Disabled
 * ITEM_NO_NAV = enums_internal.ImGuiItemFlags_NoNav
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_ButtonRepeat); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_BUTTON_REPEAT, __pyx_t_2) < 0) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":22
 * ITEM_NO_TAB_STOP = enums_internal.ImGuiItemFlags_NoTabStop
 * ITEM_BUTTON_REPEAT = enums_internal.ImGuiItemFlags_ButtonRepeat
 * ITEM_DISABLED = enums_internal.ImGuiItemFlags_Disabled             # <<<<<<<<<<<<<<
 * ITEM_NO_NAV = enums_internal.ImGuiItemFlags_NoNav
 * ITEM_NO_NAV_DEFAULT_FOCUS = enums_internal.ImGuiItemFlags_NoNavDefaultFocus
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_Disabled); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_DISABLED, __pyx_t_2) < 0) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":23
 * ITEM_BUTTON_REPEAT = enums_internal.ImGuiItemFlags_ButtonRepeat
 * ITEM_DISABLED = enums_internal.ImGuiItemFlags_Disabled
 * ITEM_NO_NAV = enums_internal.ImGuiItemFlags_NoNav             # <<<<<<<<<<<<<<
 * ITEM_NO_NAV_DEFAULT_FOCUS = enums_internal.ImGuiItemFlags_NoNavDefaultFocus
 * ITEM_SELECTABLE_DONT_CLOSE_POPUP = enums_internal.ImGuiItemFlags_SelectableDontClosePopup
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_NoNav); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_NO_NAV, __pyx_t_2) < 0) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":24
 * ITEM_DISABLED = enums_internal.ImGuiItemFlags_Disabled
 * ITEM_NO_NAV = enums_internal.ImGuiItemFlags_NoNav
 * ITEM_NO_NAV_DEFAULT_FOCUS = enums_internal.ImGuiItemFlags_NoNavDefaultFocus             # <<<<<<<<<<<<<<
 * ITEM_SELECTABLE_DONT_CLOSE_POPUP = enums_internal.ImGuiItemFlags_SelectableDontClosePopup
 * ITEM_MIXED_VALUE = enums_internal.ImGuiItemFlags_MixedValue
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_NoNavDefaultFocus); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_NO_NAV_DEFAULT_FOCUS, __pyx_t_2) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":25
 * ITEM_NO_NAV = enums_internal.ImGuiItemFlags_NoNav
 * ITEM_NO_NAV_DEFAULT_FOCUS = enums_internal.ImGuiItemFlags_NoNavDefaultFocus
 * ITEM_SELECTABLE_DONT_CLOSE_POPUP = enums_internal.ImGuiItemFlags_SelectableDontClosePopup             # <<<<<<<<<<<<<<
 * ITEM_MIXED_VALUE = enums_internal.ImGuiItemFlags_MixedValue
 * ITEM_READ_ONLY = enums_internal.ImGuiItemFlags_ReadOnly
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_SelectableDontClosePopup); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_SELECTABLE_DONT_CLOSE_POPUP, __pyx_t_2) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":26
 * ITEM_NO_NAV_DEFAULT_FOCUS = enums_internal.ImGuiItemFlags_NoNavDefaultFocus
 * ITEM_SELECTABLE_DONT_CLOSE_POPUP = enums_internal.ImGuiItemFlags_SelectableDontClosePopup
 * ITEM_MIXED_VALUE = enums_internal.ImGuiItemFlags_MixedValue             # <<<<<<<<<<<<<<
 * ITEM_READ_ONLY = enums_internal.ImGuiItemFlags_ReadOnly
 * ITEM_DEFAULT = enums_internal.ImGuiItemFlags_Default_
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_MixedValue); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_MIXED_VALUE, __pyx_t_2) < 0) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":27
 * ITEM_SELECTABLE_DONT_CLOSE_POPUP = enums_internal.ImGuiItemFlags_SelectableDontClosePopup
 * ITEM_MIXED_VALUE = enums_internal.ImGuiItemFlags_MixedValue
 * ITEM_READ_ONLY = enums_internal.ImGuiItemFlags_ReadOnly             # <<<<<<<<<<<<<<
 * ITEM_DEFAULT = enums_internal.ImGuiItemFlags_Default_
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_ReadOnly); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_READ_ONLY, __pyx_t_2) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":28
 * ITEM_MIXED_VALUE = enums_internal.ImGuiItemFlags_MixedValue
 * ITEM_READ_ONLY = enums_internal.ImGuiItemFlags_ReadOnly
 * ITEM_DEFAULT = enums_internal.ImGuiItemFlags_Default_             # <<<<<<<<<<<<<<
 * 
 * # Item Status Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_Default_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_DEFAULT, __pyx_t_2) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":31
 * 
 * # Item Status Flags
 * ITEM_STATUS_NONE = enums_internal.ImGuiItemStatusFlags_None             # <<<<<<<<<<<<<<
 * ITEM_STATUS_HOVERED_RECT = enums_internal.ImGuiItemStatusFlags_HoveredRect
 * ITEM_STATUS_HAS_DISPLAY_RECT = enums_internal.ImGuiItemStatusFlags_HasDisplayRect
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":32
 * # Item Status Flags
 * ITEM_STATUS_NONE = enums_internal.ImGuiItemStatusFlags_None
 * ITEM_STATUS_HOVERED_RECT = enums_internal.ImGuiItemStatusFlags_HoveredRect             # <<<<<<<<<<<<<<
 * ITEM_STATUS_HAS_DISPLAY_RECT = enums_internal.ImGuiItemStatusFlags_HasDisplayRect
 * ITEM_STATUS_EDITED = enums_internal.ImGuiItemStatusFlags_Edited
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_HoveredRect); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_HOVERED_RECT, __pyx_t_2) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":33
 * ITEM_STATUS_NONE = enums_internal.ImGuiItemStatusFlags_None
 * ITEM_STATUS_HOVERED_RECT = enums_internal.ImGuiItemStatusFlags_HoveredRect
 * ITEM_STATUS_HAS_DISPLAY_RECT = enums_internal.ImGuiItemStatusFlags_HasDisplayRect             # <<<<<<<<<<<<<<
 * ITEM_STATUS_EDITED = enums_internal.ImGuiItemStatusFlags_Edited
 * ITEM_STATUS_TOGGLED_SELECTION = enums_internal.ImGuiItemStatusFlags_ToggledSelection
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_HasDisplayRect); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_HAS_DISPLAY_RECT, __pyx_t_2) < 0) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":34
 * ITEM_STATUS_HOVERED_RECT = enums_internal.ImGuiItemStatusFlags_HoveredRect
 * ITEM_STATUS_HAS_DISPLAY_RECT = enums_internal.ImGuiItemStatusFlags_HasDisplayRect
 * ITEM_STATUS_EDITED = enums_internal.ImGuiItemStatusFlags_Edited             # <<<<<<<<<<<<<<
 * ITEM_STATUS_TOGGLED_SELECTION = enums_internal.ImGuiItemStatusFlags_ToggledSelection
 * ITEM_STATUS_TOGGLED_OPEN = enums_internal.ImGuiItemStatusFlags_ToggledOpen
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_Edited); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_EDITED, __pyx_t_2) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":35
 * ITEM_STATUS_HAS_DISPLAY_RECT = enums_internal.ImGuiItemStatusFlags_HasDisplayRect
 * ITEM_STATUS_EDITED = enums_internal.ImGuiItemStatusFlags_Edited
 * ITEM_STATUS_TOGGLED_SELECTION = enums_internal.ImGuiItemStatusFlags_ToggledSelection             # <<<<<<<<<<<<<<
 * ITEM_STATUS_TOGGLED_OPEN = enums_internal.ImGuiItemStatusFlags_ToggledOpen
 * ITEM_STATUS_HAS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_HasDeactivated
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_ToggledSelection); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_TOGGLED_SELECTION, __pyx_t_2) < 0) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":36
 * ITEM_STATUS_EDITED = enums_internal.ImGuiItemStatusFlags_Edited
 * ITEM_STATUS_TOGGLED_SELECTION = enums_internal.ImGuiItemStatusFlags_ToggledSelection
 * ITEM_STATUS_TOGGLED_OPEN = enums_internal.ImGuiItemStatusFlags_ToggledOpen             # <<<<<<<<<<<<<<
 * ITEM_STATUS_HAS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_HasDeactivated
 * ITEM_STATUS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_Deactivated
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_ToggledOpen); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_TOGGLED_OPEN, __pyx_t_2) < 0) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":37
 * ITEM_STATUS_TOGGLED_SELECTION = enums_internal.ImGuiItemStatusFlags_ToggledSelection
 * ITEM_STATUS_TOGGLED_OPEN = enums_internal.ImGuiItemStatusFlags_ToggledOpen
 * ITEM_STATUS_HAS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_HasDeactivated             # <<<<<<<<<<<<<<
 * ITEM_STATUS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_Deactivated
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_HasDeactivated); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_HAS_DEACTIVATED, __pyx_t_2) < 0) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":38
 * ITEM_STATUS_TOGGLED_OPEN = enums_internal.ImGuiItemStatusFlags_ToggledOpen
 * ITEM_STATUS_HAS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_HasDeactivated
 * ITEM_STATUS_DEACTIVATED = enums_internal.ImGuiItemStatusFlags_Deactivated             # <<<<<<<<<<<<<<
 * 
 * # Button Flags Private
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_Deactivated); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM_STATUS_DEACTIVATED, __pyx_t_2) < 0) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":41
 * 
 * # Button Flags Private
 * BUTTON_PRESSED_ON_CLICK = enums_internal.ImGuiButtonFlags_PressedOnClick             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_CLICK_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnClickRelease
 * BUTTON_PRESSED_ON_CLICK_RELEASE_ANYWHERE = enums_internal.ImGuiButtonFlags_PressedOnClickReleaseAnywhere
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnClick); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_CLICK, __pyx_t_2) < 0) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":42
 * # Button Flags Private
 * BUTTON_PRESSED_ON_CLICK = enums_internal.ImGuiButtonFlags_PressedOnClick
 * BUTTON_PRESSED_ON_CLICK_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnClickRelease             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_CLICK_RELEASE_ANYWHERE = enums_internal.ImGuiButtonFlags_PressedOnClickReleaseAnywhere
 * BUTTON_PRESSED_ON_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnRelease
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnClickRelease); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_CLICK_RELEASE, __pyx_t_2) < 0) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":43
 * BUTTON_PRESSED_ON_CLICK = enums_internal.ImGuiButtonFlags_PressedOnClick
 * BUTTON_PRESSED_ON_CLICK_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnClickRelease
 * BUTTON_PRESSED_ON_CLICK_RELEASE_ANYWHERE = enums_internal.ImGuiButtonFlags_PressedOnClickReleaseAnywhere             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnRelease
 * BUTTON_PRESSED_ON_DOUBLE_CLICK = enums_internal.ImGuiButtonFlags_PressedOnDoubleClick
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnClickReleaseAnywhere); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_CLICK_RELEASE_2, __pyx_t_2) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":44
 * BUTTON_PRESSED_ON_CLICK_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnClickRelease
 * BUTTON_PRESSED_ON_CLICK_RELEASE_ANYWHERE = enums_internal.ImGuiButtonFlags_PressedOnClickReleaseAnywhere
 * BUTTON_PRESSED_ON_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnRelease             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_DOUBLE_CLICK = enums_internal.ImGuiButtonFlags_PressedOnDoubleClick
 * BUTTON_PRESSED_ON_DRAG_DROP_HOLD = enums_internal.ImGuiButtonFlags_PressedOnDragDropHold
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnRelease); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_RELEASE, __pyx_t_2) < 0) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":45
 * BUTTON_PRESSED_ON_CLICK_RELEASE_ANYWHERE = enums_internal.ImGuiButtonFlags_PressedOnClickReleaseAnywhere
 * BUTTON_PRESSED_ON_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnRelease
 * BUTTON_PRESSED_ON_DOUBLE_CLICK = enums_internal.ImGuiButtonFlags_PressedOnDoubleClick             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_DRAG_DROP_HOLD = enums_internal.ImGuiButtonFlags_PressedOnDragDropHold
 * BUTTON_REPEAT = enums_internal.ImGuiButtonFlags_Repeat
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnDoubleClick); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_DOUBLE_CLICK, __pyx_t_2) < 0) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":46
 * BUTTON_PRESSED_ON_RELEASE = enums_internal.ImGuiButtonFlags_PressedOnRelease
 * BUTTON_PRESSED_ON_DOUBLE_CLICK = enums_internal.ImGuiButtonFlags_PressedOnDoubleClick
 * BUTTON_PRESSED_ON_DRAG_DROP_HOLD = enums_internal.ImGuiButtonFlags_PressedOnDragDropHold             # <<<<<<<<<<<<<<
 * BUTTON_REPEAT = enums_internal.ImGuiButtonFlags_Repeat
 * BUTTON_FLATTEN_CHILDREN = enums_internal.ImGuiButtonFlags_FlattenChildren
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnDragDropHold); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_DRAG_DROP_HOLD, __pyx_t_2) < 0) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":47
 * BUTTON_PRESSED_ON_DOUBLE_CLICK = enums_internal.ImGuiButtonFlags_PressedOnDoubleClick
 * BUTTON_PRESSED_ON_DRAG_DROP_HOLD = enums_internal.ImGuiButtonFlags_PressedOnDragDropHold
 * BUTTON_REPEAT = enums_internal.ImGuiButtonFlags_Repeat             # <<<<<<<<<<<<<<
 * BUTTON_FLATTEN_CHILDREN = enums_internal.ImGuiButtonFlags_FlattenChildren
 * BUTTON_ALLOW_ITEM_OVERLAP = enums_internal.ImGuiButtonFlags_AllowItemOverlap
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_Repeat); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_REPEAT, __pyx_t_2) < 0) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":48
 * BUTTON_PRESSED_ON_DRAG_DROP_HOLD = enums_internal.ImGuiButtonFlags_PressedOnDragDropHold
 * BUTTON_REPEAT = enums_internal.ImGuiButtonFlags_Repeat
 * BUTTON_FLATTEN_CHILDREN = enums_internal.ImGuiButtonFlags_FlattenChildren             # <<<<<<<<<<<<<<
 * BUTTON_ALLOW_ITEM_OVERLAP = enums_internal.ImGuiButtonFlags_AllowItemOverlap
 * BUTTON_DONT_CLOSE_POPUPS = enums_internal.ImGuiButtonFlags_DontClosePopups
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_FlattenChildren); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_FLATTEN_CHILDREN, __pyx_t_2) < 0) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":49
 * BUTTON_REPEAT = enums_internal.ImGuiButtonFlags_Repeat
 * BUTTON_FLATTEN_CHILDREN = enums_internal.ImGuiButtonFlags_FlattenChildren
 * BUTTON_ALLOW_ITEM_OVERLAP = enums_internal.ImGuiButtonFlags_AllowItemOverlap             # <<<<<<<<<<<<<<
 * BUTTON_DONT_CLOSE_POPUPS = enums_internal.ImGuiButtonFlags_DontClosePopups
 * BUTTON_DISABLED = enums_internal.ImGuiButtonFlags_Disabled
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_AllowItemOverlap); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_ALLOW_ITEM_OVERLAP, __pyx_t_2) < 0) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":50
 * BUTTON_FLATTEN_CHILDREN = enums_internal.ImGuiButtonFlags_FlattenChildren
 * BUTTON_ALLOW_ITEM_OVERLAP = enums_internal.ImGuiButtonFlags_AllowItemOverlap
 * BUTTON_DONT_CLOSE_POPUPS = enums_internal.ImGuiButtonFlags_DontClosePopups             # <<<<<<<<<<<<<<
 * BUTTON_DISABLED = enums_internal.ImGuiButtonFlags_Disabled
 * BUTTON_ALIGN_TEXT_BASE_LINE = enums_internal.ImGuiButtonFlags_AlignTextBaseLine
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_DontClosePopups); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_DONT_CLOSE_POPUPS, __pyx_t_2) < 0) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":51
 * BUTTON_ALLOW_ITEM_OVERLAP = enums_internal.ImGuiButtonFlags_AllowItemOverlap
 * BUTTON_DONT_CLOSE_POPUPS = enums_internal.ImGuiButtonFlags_DontClosePopups
 * BUTTON_DISABLED = enums_internal.ImGuiButtonFlags_Disabled             # <<<<<<<<<<<<<<
 * BUTTON_ALIGN_TEXT_BASE_LINE = enums_internal.ImGuiButtonFlags_AlignTextBaseLine
 * BUTTON_NO_KEY_MODIFIERS = enums_internal.ImGuiButtonFlags_NoKeyModifiers
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_Disabled); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_DISABLED, __pyx_t_2) < 0) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":52
 * BUTTON_DONT_CLOSE_POPUPS = enums_internal.ImGuiButtonFlags_DontClosePopups
 * BUTTON_DISABLED = enums_internal.ImGuiButtonFlags_Disabled
 * BUTTON_ALIGN_TEXT_BASE_LINE = enums_internal.ImGuiButtonFlags_AlignTextBaseLine             # <<<<<<<<<<<<<<
 * BUTTON_NO_KEY_MODIFIERS = enums_internal.ImGuiButtonFlags_NoKeyModifiers
 * BUTTON_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiButtonFlags_NoHoldingActiveId
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_AlignTextBaseLine); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_ALIGN_TEXT_BASE_LINE, __pyx_t_2) < 0) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":53
 * BUTTON_DISABLED = enums_internal.ImGuiButtonFlags_Disabled
 * BUTTON_ALIGN_TEXT_BASE_LINE = enums_internal.ImGuiButtonFlags_AlignTextBaseLine
 * BUTTON_NO_KEY_MODIFIERS = enums_internal.ImGuiButtonFlags_NoKeyModifiers             # <<<<<<<<<<<<<<
 * BUTTON_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiButtonFlags_NoHoldingActiveId
 * BUTTON_NO_NAV_FOCUS = enums_internal.ImGuiButtonFlags_NoNavFocus
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_NoKeyModifiers); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_NO_KEY_MODIFIERS, __pyx_t_2) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":54
 * BUTTON_ALIGN_TEXT_BASE_LINE = enums_internal.ImGuiButtonFlags_AlignTextBaseLine
 * BUTTON_NO_KEY_MODIFIERS = enums_internal.ImGuiButtonFlags_NoKeyModifiers
 * BUTTON_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiButtonFlags_NoHoldingActiveId             # <<<<<<<<<<<<<<
 * BUTTON_NO_NAV_FOCUS = enums_internal.ImGuiButtonFlags_NoNavFocus
 * BUTTON_NO_HOVERED_ON_FOCUS = enums_internal.ImGuiButtonFlags_NoHoveredOnFocus
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_NoHoldingActiveId); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_NO_HOLDING_ACTIVE_ID, __pyx_t_2) < 0) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":55
 * BUTTON_NO_KEY_MODIFIERS = enums_internal.ImGuiButtonFlags_NoKeyModifiers
 * BUTTON_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiButtonFlags_NoHoldingActiveId
 * BUTTON_NO_NAV_FOCUS = enums_internal.ImGuiButtonFlags_NoNavFocus             # <<<<<<<<<<<<<<
 * BUTTON_NO_HOVERED_ON_FOCUS = enums_internal.ImGuiButtonFlags_NoHoveredOnFocus
 * BUTTON_PRESSED_ON_MASK = enums_internal.ImGuiButtonFlags_PressedOnMask_
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_NoNavFocus); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_NO_NAV_FOCUS, __pyx_t_2) < 0) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":56
 * BUTTON_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiButtonFlags_NoHoldingActiveId
 * BUTTON_NO_NAV_FOCUS = enums_internal.ImGuiButtonFlags_NoNavFocus
 * BUTTON_NO_HOVERED_ON_FOCUS = enums_internal.ImGuiButtonFlags_NoHoveredOnFocus             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_MASK = enums_internal.ImGuiButtonFlags_PressedOnMask_
 * BUTTON_PRESSED_ON_DEFAULT = enums_internal.ImGuiButtonFlags_PressedOnDefault_
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_NoHoveredOnFocus); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_NO_HOVERED_ON_FOCUS, __pyx_t_2) < 0) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":57
 * BUTTON_NO_NAV_FOCUS = enums_internal.ImGuiButtonFlags_NoNavFocus
 * BUTTON_NO_HOVERED_ON_FOCUS = enums_internal.ImGuiButtonFlags_NoHoveredOnFocus
 * BUTTON_PRESSED_ON_MASK = enums_internal.ImGuiButtonFlags_PressedOnMask_             # <<<<<<<<<<<<<<
 * BUTTON_PRESSED_ON_DEFAULT = enums_internal.ImGuiButtonFlags_PressedOnDefault_
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnMask_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_MASK, __pyx_t_2) < 0) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":58
 * BUTTON_NO_HOVERED_ON_FOCUS = enums_internal.ImGuiButtonFlags_NoHoveredOnFocus
 * BUTTON_PRESSED_ON_MASK = enums_internal.ImGuiButtonFlags_PressedOnMask_
 * BUTTON_PRESSED_ON_DEFAULT = enums_internal.ImGuiButtonFlags_PressedOnDefault_             # <<<<<<<<<<<<<<
 * 
 * # Slider Flags Private
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlags_PressedOnDefault_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUTTON_PRESSED_ON_DEFAULT, __pyx_t_2) < 0) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":61
 * 
 * # Slider Flags Private
 * SLIDER_VERTICAL = enums_internal.ImGuiSliderFlags_Vertical             # <<<<<<<<<<<<<<
 * SLIDER_READ_ONLY = enums_internal.ImGuiSliderFlags_ReadOnly
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSliderFlagsPrivate_(ImGuiSliderFlags_Vertical); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SLIDER_VERTICAL, __pyx_t_2) < 0) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":62
 * # Slider Flags Private
 * SLIDER_VERTICAL = enums_internal.ImGuiSliderFlags_Vertical
 * SLIDER_READ_ONLY = enums_internal.ImGuiSliderFlags_ReadOnly             # <<<<<<<<<<<<<<
 * 
 * # Selectable Flags Private
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSliderFlagsPrivate_(ImGuiSliderFlags_ReadOnly); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SLIDER_READ_ONLY, __pyx_t_2) < 0) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":65
 * 
 * # Selectable Flags Private
 * SELECTABLE_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiSelectableFlags_NoHoldingActiveID             # <<<<<<<<<<<<<<
 * SELECTABLE_SELECT_ON_CLICK = enums_internal.ImGuiSelectableFlags_SelectOnClick
 * SELECTABLE_SELECT_ON_RELEASE = enums_internal.ImGuiSelectableFlags_SelectOnRelease
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_NoHoldingActiveID); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_NO_HOLDING_ACTIVE_ID, __pyx_t_2) < 0) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":66
 * # Selectable Flags Private
 * SELECTABLE_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiSelectableFlags_NoHoldingActiveID
 * SELECTABLE_SELECT_ON_CLICK = enums_internal.ImGuiSelectableFlags_SelectOnClick             # <<<<<<<<<<<<<<
 * SELECTABLE_SELECT_ON_RELEASE = enums_internal.ImGuiSelectableFlags_SelectOnRelease
 * SELECTABLE_SPAN_AVAILABLE_WIDTH = enums_internal.ImGuiSelectableFlags_SpanAvailWidth
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_SelectOnClick); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_SELECT_ON_CLICK, __pyx_t_2) < 0) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":67
 * SELECTABLE_NO_HOLDING_ACTIVE_ID = enums_internal.ImGuiSelectableFlags_NoHoldingActiveID
 * SELECTABLE_SELECT_ON_CLICK = enums_internal.ImGuiSelectableFlags_SelectOnClick
 * SELECTABLE_SELECT_ON_RELEASE = enums_internal.ImGuiSelectableFlags_SelectOnRelease             # <<<<<<<<<<<<<<
 * SELECTABLE_SPAN_AVAILABLE_WIDTH = enums_internal.ImGuiSelectableFlags_SpanAvailWidth
 * SELECTABLE_DRAW_HOVERED_WHEN_HELD = enums_internal.ImGuiSelectableFlags_DrawHoveredWhenHeld
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_SelectOnRelease); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_SELECT_ON_RELEASE, __pyx_t_2) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":68
 * SELECTABLE_SELECT_ON_CLICK = enums_internal.ImGuiSelectableFlags_SelectOnClick
 * SELECTABLE_SELECT_ON_RELEASE = enums_internal.ImGuiSelectableFlags_SelectOnRelease
 * SELECTABLE_SPAN_AVAILABLE_WIDTH = enums_internal.ImGuiSelectableFlags_SpanAvailWidth             # <<<<<<<<<<<<<<
 * SELECTABLE_DRAW_HOVERED_WHEN_HELD = enums_internal.ImGuiSelectableFlags_DrawHoveredWhenHeld
 * SELECTABLE_SET_NAV_ID_ON_HOVER = enums_internal.ImGuiSelectableFlags_SetNavIdOnHover
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_SpanAvailWidth); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_SPAN_AVAILABLE_WIDTH, __pyx_t_2) < 0) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":69
 * SELECTABLE_SELECT_ON_RELEASE = enums_internal.ImGuiSelectableFlags_SelectOnRelease
 * SELECTABLE_SPAN_AVAILABLE_WIDTH = enums_internal.ImGuiSelectableFlags_SpanAvailWidth
 * SELECTABLE_DRAW_HOVERED_WHEN_HELD = enums_internal.ImGuiSelectableFlags_DrawHoveredWhenHeld             # <<<<<<<<<<<<<<
 * SELECTABLE_SET_NAV_ID_ON_HOVER = enums_internal.ImGuiSelectableFlags_SetNavIdOnHover
 * SELECTABLE_NO_PAD_WIDHT_HALF_SPACING = enums_internal.ImGuiSelectableFlags_NoPadWithHalfSpacing
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_DrawHoveredWhenHeld); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_DRAW_HOVERED_WHEN_HEL, __pyx_t_2) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":70
 * SELECTABLE_SPAN_AVAILABLE_WIDTH = enums_internal.ImGuiSelectableFlags_SpanAvailWidth
 * SELECTABLE_DRAW_HOVERED_WHEN_HELD = enums_internal.ImGuiSelectableFlags_DrawHoveredWhenHeld
 * SELECTABLE_SET_NAV_ID_ON_HOVER = enums_internal.ImGuiSelectableFlags_SetNavIdOnHover             # <<<<<<<<<<<<<<
 * SELECTABLE_NO_PAD_WIDHT_HALF_SPACING = enums_internal.ImGuiSelectableFlags_NoPadWithHalfSpacing
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_SetNavIdOnHover); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_SET_NAV_ID_ON_HOVER, __pyx_t_2) < 0) __PYX_ERR(1, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":71
 * SELECTABLE_DRAW_HOVERED_WHEN_HELD = enums_internal.ImGuiSelectableFlags_DrawHoveredWhenHeld
 * SELECTABLE_SET_NAV_ID_ON_HOVER = enums_internal.ImGuiSelectableFlags_SetNavIdOnHover
 * SELECTABLE_NO_PAD_WIDHT_HALF_SPACING = enums_internal.ImGuiSelectableFlags_NoPadWithHalfSpacing             # <<<<<<<<<<<<<<
 * 
 * # Tree Node Flags Private
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlags_NoPadWithHalfSpacing); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_NO_PAD_WIDHT_HALF_SPA, __pyx_t_2) < 0) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":74
 * 
 * # Tree Node Flags Private
 * TREE_NODE_CLIP_LABEL_FOR_TRAILING_BUTTON = enums_internal.ImGuiTreeNodeFlags_ClipLabelForTrailingButton             # <<<<<<<<<<<<<<
 * 
 * # Separator Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTreeNodeFlagsPrivate_(ImGuiTreeNodeFlags_ClipLabelForTrailingButton); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_CLIP_LABEL_FOR_TRAILIN, __pyx_t_2) < 0) __PYX_ERR(1, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":77
 * 
 * # Separator Flags
 * SEPARATOR_NONE = enums_internal.ImGuiSeparatorFlags_None             # <<<<<<<<<<<<<<
 * SEPARATOR_HORIZONTAL = enums_internal.ImGuiSeparatorFlags_Horizontal
 * SEPARATOR_VERTICAL = enums_internal.ImGuiSeparatorFlags_Vertical
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSeparatorFlags_(ImGuiSeparatorFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SEPARATOR_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":78
 * # Separator Flags
 * SEPARATOR_NONE = enums_internal.ImGuiSeparatorFlags_None
 * SEPARATOR_HORIZONTAL = enums_internal.ImGuiSeparatorFlags_Horizontal             # <<<<<<<<<<<<<<
 * SEPARATOR_VERTICAL = enums_internal.ImGuiSeparatorFlags_Vertical
 * SEPARATOR_SPAN_ALL_COLUMNS = enums_internal.ImGuiSeparatorFlags_SpanAllColumns
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSeparatorFlags_(ImGuiSeparatorFlags_Horizontal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SEPARATOR_HORIZONTAL, __pyx_t_2) < 0) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":79
 * SEPARATOR_NONE = enums_internal.ImGuiSeparatorFlags_None
 * SEPARATOR_HORIZONTAL = enums_internal.ImGuiSeparatorFlags_Horizontal
 * SEPARATOR_VERTICAL = enums_internal.ImGuiSeparatorFlags_Vertical             # <<<<<<<<<<<<<<
 * SEPARATOR_SPAN_ALL_COLUMNS = enums_internal.ImGuiSeparatorFlags_SpanAllColumns
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSeparatorFlags_(ImGuiSeparatorFlags_Vertical); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SEPARATOR_VERTICAL, __pyx_t_2) < 0) __PYX_ERR(1, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":80
 * SEPARATOR_HORIZONTAL = enums_internal.ImGuiSeparatorFlags_Horizontal
 * SEPARATOR_VERTICAL = enums_internal.ImGuiSeparatorFlags_Vertical
 * SEPARATOR_SPAN_ALL_COLUMNS = enums_internal.ImGuiSeparatorFlags_SpanAllColumns             # <<<<<<<<<<<<<<
 * 
 * # Text Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiSeparatorFlags_(ImGuiSeparatorFlags_SpanAllColumns); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SEPARATOR_SPAN_ALL_COLUMNS, __pyx_t_2) < 0) __PYX_ERR(1, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":83
 * 
 * # Text Flags
 * TEXT_NONE = enums_internal.ImGuiTextFlags_None             # <<<<<<<<<<<<<<
 * TEXT_NO_WIDTH_FRO_LARGE_CLIPPED_TEXT = enums_internal.ImGuiTextFlags_NoWidthForLargeClippedText
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTextFlags_(ImGuiTextFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TEXT_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":84
 * # Text Flags
 * TEXT_NONE = enums_internal.ImGuiTextFlags_None
 * TEXT_NO_WIDTH_FRO_LARGE_CLIPPED_TEXT = enums_internal.ImGuiTextFlags_NoWidthForLargeClippedText             # <<<<<<<<<<<<<<
 * 
 * # Tooltip Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTextFlags_(ImGuiTextFlags_NoWidthForLargeClippedText); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TEXT_NO_WIDTH_FRO_LARGE_CLIPPED, __pyx_t_2) < 0) __PYX_ERR(1, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":87
 * 
 * # Tooltip Flags
 * TOOLTIP_NONE = enums_internal.ImGuiTooltipFlags_None             # <<<<<<<<<<<<<<
 * TOOLTIP_OVERRIDE_PREVIOUS_TOOLTIP = enums_internal.ImGuiTooltipFlags_OverridePreviousTooltip
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTooltipFlags_(ImGuiTooltipFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TOOLTIP_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":88
 * # Tooltip Flags
 * TOOLTIP_NONE = enums_internal.ImGuiTooltipFlags_None
 * TOOLTIP_OVERRIDE_PREVIOUS_TOOLTIP = enums_internal.ImGuiTooltipFlags_OverridePreviousTooltip             # <<<<<<<<<<<<<<
 * 
 * # Layout Type
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTooltipFlags_(ImGuiTooltipFlags_OverridePreviousTooltip); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TOOLTIP_OVERRIDE_PREVIOUS_TOOLTI, __pyx_t_2) < 0) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":91
 * 
 * # Layout Type
 * LAYOUT_TYPE_HORIZONTAL = enums_internal.ImGuiLayoutType_Horizontal             # <<<<<<<<<<<<<<
 * LAYOUT_TYPE_VERTICAL = enums_internal.ImGuiLayoutType_Vertical
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLayoutType_(ImGuiLayoutType_Horizontal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LAYOUT_TYPE_HORIZONTAL, __pyx_t_2) < 0) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":92
 * # Layout Type
 * LAYOUT_TYPE_HORIZONTAL = enums_internal.ImGuiLayoutType_Horizontal
 * LAYOUT_TYPE_VERTICAL = enums_internal.ImGuiLayoutType_Vertical             # <<<<<<<<<<<<<<
 * 
 * # Log Type
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLayoutType_(ImGuiLayoutType_Vertical); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LAYOUT_TYPE_VERTICAL, __pyx_t_2) < 0) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":95
 * 
 * # Log Type
 * LOG_TYPE_NONE = enums_internal.ImGuiLogType_None             # <<<<<<<<<<<<<<
 * LOG_TYPE_LOG_TYPE_TTY = enums_internal.ImGuiLogType_TTY
 * LOG_TYPE_LOG_TYPE_FILE = enums_internal.ImGuiLogType_File
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_TYPE_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":96
 * # Log Type
 * LOG_TYPE_NONE = enums_internal.ImGuiLogType_None
 * LOG_TYPE_LOG_TYPE_TTY = enums_internal.ImGuiLogType_TTY             # <<<<<<<<<<<<<<
 * LOG_TYPE_LOG_TYPE_FILE = enums_internal.ImGuiLogType_File
 * LOG_TYPE_LOG_TYPE_BUFFER = enums_internal.ImGuiLogType_Buffer
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType_TTY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_TYPE_LOG_TYPE_TTY, __pyx_t_2) < 0) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":97
 * LOG_TYPE_NONE = enums_internal.ImGuiLogType_None
 * LOG_TYPE_LOG_TYPE_TTY = enums_internal.ImGuiLogType_TTY
 * LOG_TYPE_LOG_TYPE_FILE = enums_internal.ImGuiLogType_File             # <<<<<<<<<<<<<<
 * LOG_TYPE_LOG_TYPE_BUFFER = enums_internal.ImGuiLogType_Buffer
 * LOG_TYPE_LOG_TYPE_CLIPBOARD = enums_internal.ImGuiLogType_Clipboard
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType_File); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_TYPE_LOG_TYPE_FILE, __pyx_t_2) < 0) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":98
 * LOG_TYPE_LOG_TYPE_TTY = enums_internal.ImGuiLogType_TTY
 * LOG_TYPE_LOG_TYPE_FILE = enums_internal.ImGuiLogType_File
 * LOG_TYPE_LOG_TYPE_BUFFER = enums_internal.ImGuiLogType_Buffer             # <<<<<<<<<<<<<<
 * LOG_TYPE_LOG_TYPE_CLIPBOARD = enums_internal.ImGuiLogType_Clipboard
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType_Buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_TYPE_LOG_TYPE_BUFFER, __pyx_t_2) < 0) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":99
 * LOG_TYPE_LOG_TYPE_FILE = enums_internal.ImGuiLogType_File
 * LOG_TYPE_LOG_TYPE_BUFFER = enums_internal.ImGuiLogType_Buffer
 * LOG_TYPE_LOG_TYPE_CLIPBOARD = enums_internal.ImGuiLogType_Clipboard             # <<<<<<<<<<<<<<
 * 
 * # Axis
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType_Clipboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_TYPE_LOG_TYPE_CLIPBOARD, __pyx_t_2) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":102
 * 
 * # Axis
 * AXIS_NONE = enums_internal.ImGuiAxis_None             # <<<<<<<<<<<<<<
 * AXIS_X = enums_internal.ImGuiAxis_X
 * AXIS_Y = enums_internal.ImGuiAxis_Y
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiAxis(ImGuiAxis_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AXIS_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":103
 * # Axis
 * AXIS_NONE = enums_internal.ImGuiAxis_None
 * AXIS_X = enums_internal.ImGuiAxis_X             # <<<<<<<<<<<<<<
 * AXIS_Y = enums_internal.ImGuiAxis_Y
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiAxis(ImGuiAxis_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AXIS_X, __pyx_t_2) < 0) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":104
 * AXIS_NONE = enums_internal.ImGuiAxis_None
 * AXIS_X = enums_internal.ImGuiAxis_X
 * AXIS_Y = enums_internal.ImGuiAxis_Y             # <<<<<<<<<<<<<<
 * 
 * # Plot Type
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiAxis(ImGuiAxis_Y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AXIS_Y, __pyx_t_2) < 0) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":107
 * 
 * # Plot Type
 * PLOT_TYPE_LINES = enums_internal.ImGuiPlotType_Lines             # <<<<<<<<<<<<<<
 * PLOT_TYPE_HISTOGRAM = enums_internal.ImGuiPlotType_Histogram
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiPlotType(ImGuiPlotType_Lines); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLOT_TYPE_LINES, __pyx_t_2) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":108
 * # Plot Type
 * PLOT_TYPE_LINES = enums_internal.ImGuiPlotType_Lines
 * PLOT_TYPE_HISTOGRAM = enums_internal.ImGuiPlotType_Histogram             # <<<<<<<<<<<<<<
 * 
 * # Input Source
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiPlotType(ImGuiPlotType_Histogram); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLOT_TYPE_HISTOGRAM, __pyx_t_2) < 0) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":111
 * 
 * # Input Source
 * INPUT_SOURCE_NONE = enums_internal.ImGuiInputSource_None             # <<<<<<<<<<<<<<
 * INPUT_SOURCE_MOUSE = enums_internal.ImGuiInputSource_Mouse
 * INPUT_SOURCE_KEYBOARD = enums_internal.ImGuiInputSource_Keyboard
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_SOURCE_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":112
 * # Input Source
 * INPUT_SOURCE_NONE = enums_internal.ImGuiInputSource_None
 * INPUT_SOURCE_MOUSE = enums_internal.ImGuiInputSource_Mouse             # <<<<<<<<<<<<<<
 * INPUT_SOURCE_KEYBOARD = enums_internal.ImGuiInputSource_Keyboard
 * INPUT_SOURCE_GAMEPAD = enums_internal.ImGuiInputSource_Gamepad
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource_Mouse); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_SOURCE_MOUSE, __pyx_t_2) < 0) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":113
 * INPUT_SOURCE_NONE = enums_internal.ImGuiInputSource_None
 * INPUT_SOURCE_MOUSE = enums_internal.ImGuiInputSource_Mouse
 * INPUT_SOURCE_KEYBOARD = enums_internal.ImGuiInputSource_Keyboard             # <<<<<<<<<<<<<<
 * INPUT_SOURCE_GAMEPAD = enums_internal.ImGuiInputSource_Gamepad
 * INPUT_SOURCE_NAV = enums_internal.ImGuiInputSource_Nav
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource_Keyboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_SOURCE_KEYBOARD, __pyx_t_2) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":114
 * INPUT_SOURCE_MOUSE = enums_internal.ImGuiInputSource_Mouse
 * INPUT_SOURCE_KEYBOARD = enums_internal.ImGuiInputSource_Keyboard
 * INPUT_SOURCE_GAMEPAD = enums_internal.ImGuiInputSource_Gamepad             # <<<<<<<<<<<<<<
 * INPUT_SOURCE_NAV = enums_internal.ImGuiInputSource_Nav
 * INPUT_SOURCE_COUNT = enums_internal.ImGuiInputSource_COUNT
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource_Gamepad); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_SOURCE_GAMEPAD, __pyx_t_2) < 0) __PYX_ERR(1, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":115
 * INPUT_SOURCE_KEYBOARD = enums_internal.ImGuiInputSource_Keyboard
 * INPUT_SOURCE_GAMEPAD = enums_internal.ImGuiInputSource_Gamepad
 * INPUT_SOURCE_NAV = enums_internal.ImGuiInputSource_Nav             # <<<<<<<<<<<<<<
 * INPUT_SOURCE_COUNT = enums_internal.ImGuiInputSource_COUNT
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource_Nav); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_SOURCE_NAV, __pyx_t_2) < 0) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":116
 * INPUT_SOURCE_GAMEPAD = enums_internal.ImGuiInputSource_Gamepad
 * INPUT_SOURCE_NAV = enums_internal.ImGuiInputSource_Nav
 * INPUT_SOURCE_COUNT = enums_internal.ImGuiInputSource_COUNT             # <<<<<<<<<<<<<<
 * 
 * # Input Read Mode
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource_COUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_SOURCE_COUNT, __pyx_t_2) < 0) __PYX_ERR(1, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":119
 * 
 * # Input Read Mode
 * INPUT_READ_MODE_DOWN = enums_internal.ImGuiInputReadMode_Down             # <<<<<<<<<<<<<<
 * INPUT_READ_MODE_PRESSED = enums_internal.ImGuiInputReadMode_Pressed
 * INPUT_READ_MODE_RELEASED = enums_internal.ImGuiInputReadMode_Released
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode_Down); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_READ_MODE_DOWN, __pyx_t_2) < 0) __PYX_ERR(1, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":120
 * # Input Read Mode
 * INPUT_READ_MODE_DOWN = enums_internal.ImGuiInputReadMode_Down
 * INPUT_READ_MODE_PRESSED = enums_internal.ImGuiInputReadMode_Pressed             # <<<<<<<<<<<<<<
 * INPUT_READ_MODE_RELEASED = enums_internal.ImGuiInputReadMode_Released
 * INPUT_READ_MODE_REPEAT = enums_internal.ImGuiInputReadMode_Repeat
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode_Pressed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_READ_MODE_PRESSED, __pyx_t_2) < 0) __PYX_ERR(1, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":121
 * INPUT_READ_MODE_DOWN = enums_internal.ImGuiInputReadMode_Down
 * INPUT_READ_MODE_PRESSED = enums_internal.ImGuiInputReadMode_Pressed
 * INPUT_READ_MODE_RELEASED = enums_internal.ImGuiInputReadMode_Released             # <<<<<<<<<<<<<<
 * INPUT_READ_MODE_REPEAT = enums_internal.ImGuiInputReadMode_Repeat
 * INPUT_READ_MODE_REPEAT_SLOW = enums_internal.ImGuiInputReadMode_RepeatSlow
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode_Released); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_READ_MODE_RELEASED, __pyx_t_2) < 0) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":122
 * INPUT_READ_MODE_PRESSED = enums_internal.ImGuiInputReadMode_Pressed
 * INPUT_READ_MODE_RELEASED = enums_internal.ImGuiInputReadMode_Released
 * INPUT_READ_MODE_REPEAT = enums_internal.ImGuiInputReadMode_Repeat             # <<<<<<<<<<<<<<
 * INPUT_READ_MODE_REPEAT_SLOW = enums_internal.ImGuiInputReadMode_RepeatSlow
 * INPUT_READ_MODE_REPEAT_FAST = enums_internal.ImGuiInputReadMode_RepeatFast
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode_Repeat); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_READ_MODE_REPEAT, __pyx_t_2) < 0) __PYX_ERR(1, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":123
 * INPUT_READ_MODE_RELEASED = enums_internal.ImGuiInputReadMode_Released
 * INPUT_READ_MODE_REPEAT = enums_internal.ImGuiInputReadMode_Repeat
 * INPUT_READ_MODE_REPEAT_SLOW = enums_internal.ImGuiInputReadMode_RepeatSlow             # <<<<<<<<<<<<<<
 * INPUT_READ_MODE_REPEAT_FAST = enums_internal.ImGuiInputReadMode_RepeatFast
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode_RepeatSlow); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_READ_MODE_REPEAT_SLOW, __pyx_t_2) < 0) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":124
 * INPUT_READ_MODE_REPEAT = enums_internal.ImGuiInputReadMode_Repeat
 * INPUT_READ_MODE_REPEAT_SLOW = enums_internal.ImGuiInputReadMode_RepeatSlow
 * INPUT_READ_MODE_REPEAT_FAST = enums_internal.ImGuiInputReadMode_RepeatFast             # <<<<<<<<<<<<<<
 * 
 * # Nav Highlight Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode_RepeatFast); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_READ_MODE_REPEAT_FAST, __pyx_t_2) < 0) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":127
 * 
 * # Nav Highlight Flags
 * NAV_HIGHLIGHT_NONE = enums_internal.ImGuiNavHighlightFlags_None             # <<<<<<<<<<<<<<
 * NAV_HIGHLIGHT_TYPE_DEFAULT = enums_internal.ImGuiNavHighlightFlags_TypeDefault
 * NAV_HIGHLIGHT_TYPE_THIN = enums_internal.ImGuiNavHighlightFlags_TypeThin
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_HIGHLIGHT_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":128
 * # Nav Highlight Flags
 * NAV_HIGHLIGHT_NONE = enums_internal.ImGuiNavHighlightFlags_None
 * NAV_HIGHLIGHT_TYPE_DEFAULT = enums_internal.ImGuiNavHighlightFlags_TypeDefault             # <<<<<<<<<<<<<<
 * NAV_HIGHLIGHT_TYPE_THIN = enums_internal.ImGuiNavHighlightFlags_TypeThin
 * NAV_HIGHLIGHT_ALWAYS_DRAW = enums_internal.ImGuiNavHighlightFlags_AlwaysDraw
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_TypeDefault); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_HIGHLIGHT_TYPE_DEFAULT, __pyx_t_2) < 0) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":129
 * NAV_HIGHLIGHT_NONE = enums_internal.ImGuiNavHighlightFlags_None
 * NAV_HIGHLIGHT_TYPE_DEFAULT = enums_internal.ImGuiNavHighlightFlags_TypeDefault
 * NAV_HIGHLIGHT_TYPE_THIN = enums_internal.ImGuiNavHighlightFlags_TypeThin             # <<<<<<<<<<<<<<
 * NAV_HIGHLIGHT_ALWAYS_DRAW = enums_internal.ImGuiNavHighlightFlags_AlwaysDraw
 * NAV_HIGHLIGHT_NO_ROUNDING = enums_internal.ImGuiNavHighlightFlags_NoRounding
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_TypeThin); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_HIGHLIGHT_TYPE_THIN, __pyx_t_2) < 0) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":130
 * NAV_HIGHLIGHT_TYPE_DEFAULT = enums_internal.ImGuiNavHighlightFlags_TypeDefault
 * NAV_HIGHLIGHT_TYPE_THIN = enums_internal.ImGuiNavHighlightFlags_TypeThin
 * NAV_HIGHLIGHT_ALWAYS_DRAW = enums_internal.ImGuiNavHighlightFlags_AlwaysDraw             # <<<<<<<<<<<<<<
 * NAV_HIGHLIGHT_NO_ROUNDING = enums_internal.ImGuiNavHighlightFlags_NoRounding
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_AlwaysDraw); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_HIGHLIGHT_ALWAYS_DRAW, __pyx_t_2) < 0) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":131
 * NAV_HIGHLIGHT_TYPE_THIN = enums_internal.ImGuiNavHighlightFlags_TypeThin
 * NAV_HIGHLIGHT_ALWAYS_DRAW = enums_internal.ImGuiNavHighlightFlags_AlwaysDraw
 * NAV_HIGHLIGHT_NO_ROUNDING = enums_internal.ImGuiNavHighlightFlags_NoRounding             # <<<<<<<<<<<<<<
 * 
 * # Nav Dir Source Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_NoRounding); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_HIGHLIGHT_NO_ROUNDING, __pyx_t_2) < 0) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":134
 * 
 * # Nav Dir Source Flags
 * NAV_DIR_SOURCE_NONE = enums_internal.ImGuiNavDirSourceFlags_None             # <<<<<<<<<<<<<<
 * NAV_DIR_SOURCE_KEYBOARD = enums_internal.ImGuiNavDirSourceFlags_Keyboard
 * NAV_DIR_SOURCE_PAD_D_PAD = enums_internal.ImGuiNavDirSourceFlags_PadDPad
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavDirSourceFlags_(ImGuiNavDirSourceFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_DIR_SOURCE_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":135
 * # Nav Dir Source Flags
 * NAV_DIR_SOURCE_NONE = enums_internal.ImGuiNavDirSourceFlags_None
 * NAV_DIR_SOURCE_KEYBOARD = enums_internal.ImGuiNavDirSourceFlags_Keyboard             # <<<<<<<<<<<<<<
 * NAV_DIR_SOURCE_PAD_D_PAD = enums_internal.ImGuiNavDirSourceFlags_PadDPad
 * NAV_DIR_SOURCE_PAD_L_STICK = enums_internal.ImGuiNavDirSourceFlags_PadLStick
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavDirSourceFlags_(ImGuiNavDirSourceFlags_Keyboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_DIR_SOURCE_KEYBOARD, __pyx_t_2) < 0) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":136
 * NAV_DIR_SOURCE_NONE = enums_internal.ImGuiNavDirSourceFlags_None
 * NAV_DIR_SOURCE_KEYBOARD = enums_internal.ImGuiNavDirSourceFlags_Keyboard
 * NAV_DIR_SOURCE_PAD_D_PAD = enums_internal.ImGuiNavDirSourceFlags_PadDPad             # <<<<<<<<<<<<<<
 * NAV_DIR_SOURCE_PAD_L_STICK = enums_internal.ImGuiNavDirSourceFlags_PadLStick
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavDirSourceFlags_(ImGuiNavDirSourceFlags_PadDPad); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_DIR_SOURCE_PAD_D_PAD, __pyx_t_2) < 0) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":137
 * NAV_DIR_SOURCE_KEYBOARD = enums_internal.ImGuiNavDirSourceFlags_Keyboard
 * NAV_DIR_SOURCE_PAD_D_PAD = enums_internal.ImGuiNavDirSourceFlags_PadDPad
 * NAV_DIR_SOURCE_PAD_L_STICK = enums_internal.ImGuiNavDirSourceFlags_PadLStick             # <<<<<<<<<<<<<<
 * 
 * # Nav Move Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavDirSourceFlags_(ImGuiNavDirSourceFlags_PadLStick); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_DIR_SOURCE_PAD_L_STICK, __pyx_t_2) < 0) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":140
 * 
 * # Nav Move Flags
 * NAV_MOVE_NONE = enums_internal.ImGuiNavMoveFlags_None             # <<<<<<<<<<<<<<
 * NAV_MOVE_LOOP_X = enums_internal.ImGuiNavMoveFlags_LoopX
 * NAV_MOVE_LOOP_Y = enums_internal.ImGuiNavMoveFlags_LoopY
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":141
 * # Nav Move Flags
 * NAV_MOVE_NONE = enums_internal.ImGuiNavMoveFlags_None
 * NAV_MOVE_LOOP_X = enums_internal.ImGuiNavMoveFlags_LoopX             # <<<<<<<<<<<<<<
 * NAV_MOVE_LOOP_Y = enums_internal.ImGuiNavMoveFlags_LoopY
 * NAV_MOVE_WRAP_X = enums_internal.ImGuiNavMoveFlags_WrapX
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_LoopX); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_LOOP_X, __pyx_t_2) < 0) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":142
 * NAV_MOVE_NONE = enums_internal.ImGuiNavMoveFlags_None
 * NAV_MOVE_LOOP_X = enums_internal.ImGuiNavMoveFlags_LoopX
 * NAV_MOVE_LOOP_Y = enums_internal.ImGuiNavMoveFlags_LoopY             # <<<<<<<<<<<<<<
 * NAV_MOVE_WRAP_X = enums_internal.ImGuiNavMoveFlags_WrapX
 * NAV_MOVE_WRAP_Y = enums_internal.ImGuiNavMoveFlags_WrapY
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_LoopY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_LOOP_Y, __pyx_t_2) < 0) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":143
 * NAV_MOVE_LOOP_X = enums_internal.ImGuiNavMoveFlags_LoopX
 * NAV_MOVE_LOOP_Y = enums_internal.ImGuiNavMoveFlags_LoopY
 * NAV_MOVE_WRAP_X = enums_internal.ImGuiNavMoveFlags_WrapX             # <<<<<<<<<<<<<<
 * NAV_MOVE_WRAP_Y = enums_internal.ImGuiNavMoveFlags_WrapY
 * NAV_MOVE_ALLOW_CURRENT_NAV_ID = enums_internal.ImGuiNavMoveFlags_AllowCurrentNavId
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_WrapX); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_WRAP_X, __pyx_t_2) < 0) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":144
 * NAV_MOVE_LOOP_Y = enums_internal.ImGuiNavMoveFlags_LoopY
 * NAV_MOVE_WRAP_X = enums_internal.ImGuiNavMoveFlags_WrapX
 * NAV_MOVE_WRAP_Y = enums_internal.ImGuiNavMoveFlags_WrapY             # <<<<<<<<<<<<<<
 * NAV_MOVE_ALLOW_CURRENT_NAV_ID = enums_internal.ImGuiNavMoveFlags_AllowCurrentNavId
 * NAV_MOVE_ALSO_SCORE_VISIBLE_SET = enums_internal.ImGuiNavMoveFlags_AlsoScoreVisibleSet
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_WrapY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_WRAP_Y, __pyx_t_2) < 0) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":145
 * NAV_MOVE_WRAP_X = enums_internal.ImGuiNavMoveFlags_WrapX
 * NAV_MOVE_WRAP_Y = enums_internal.ImGuiNavMoveFlags_WrapY
 * NAV_MOVE_ALLOW_CURRENT_NAV_ID = enums_internal.ImGuiNavMoveFlags_AllowCurrentNavId             # <<<<<<<<<<<<<<
 * NAV_MOVE_ALSO_SCORE_VISIBLE_SET = enums_internal.ImGuiNavMoveFlags_AlsoScoreVisibleSet
 * NAV_MOVE_SCROLL_TO_EDGE = enums_internal.ImGuiNavMoveFlags_ScrollToEdge
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_AllowCurrentNavId); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_ALLOW_CURRENT_NAV_ID, __pyx_t_2) < 0) __PYX_ERR(1, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":146
 * NAV_MOVE_WRAP_Y = enums_internal.ImGuiNavMoveFlags_WrapY
 * NAV_MOVE_ALLOW_CURRENT_NAV_ID = enums_internal.ImGuiNavMoveFlags_AllowCurrentNavId
 * NAV_MOVE_ALSO_SCORE_VISIBLE_SET = enums_internal.ImGuiNavMoveFlags_AlsoScoreVisibleSet             # <<<<<<<<<<<<<<
 * NAV_MOVE_SCROLL_TO_EDGE = enums_internal.ImGuiNavMoveFlags_ScrollToEdge
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_AlsoScoreVisibleSet); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_ALSO_SCORE_VISIBLE_SET, __pyx_t_2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":147
 * NAV_MOVE_ALLOW_CURRENT_NAV_ID = enums_internal.ImGuiNavMoveFlags_AllowCurrentNavId
 * NAV_MOVE_ALSO_SCORE_VISIBLE_SET = enums_internal.ImGuiNavMoveFlags_AlsoScoreVisibleSet
 * NAV_MOVE_SCROLL_TO_EDGE = enums_internal.ImGuiNavMoveFlags_ScrollToEdge             # <<<<<<<<<<<<<<
 * 
 * # Nav Forward
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_ScrollToEdge); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_MOVE_SCROLL_TO_EDGE, __pyx_t_2) < 0) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":150
 * 
 * # Nav Forward
 * NAV_FORWARD_NONE = enums_internal.ImGuiNavForward_None             # <<<<<<<<<<<<<<
 * NAV_FORWARD_FORWARD_QUEUED = enums_internal.ImGuiNavForward_ForwardQueued
 * NAV_FORWARD_FORWARD_ACTIVE = enums_internal.ImGuiNavForward_ForwardActive
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavForward(ImGuiNavForward_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_FORWARD_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":151
 * # Nav Forward
 * NAV_FORWARD_NONE = enums_internal.ImGuiNavForward_None
 * NAV_FORWARD_FORWARD_QUEUED = enums_internal.ImGuiNavForward_ForwardQueued             # <<<<<<<<<<<<<<
 * NAV_FORWARD_FORWARD_ACTIVE = enums_internal.ImGuiNavForward_ForwardActive
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavForward(ImGuiNavForward_ForwardQueued); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_FORWARD_FORWARD_QUEUED, __pyx_t_2) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":152
 * NAV_FORWARD_NONE = enums_internal.ImGuiNavForward_None
 * NAV_FORWARD_FORWARD_QUEUED = enums_internal.ImGuiNavForward_ForwardQueued
 * NAV_FORWARD_FORWARD_ACTIVE = enums_internal.ImGuiNavForward_ForwardActive             # <<<<<<<<<<<<<<
 * 
 * # Nav Layer
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavForward(ImGuiNavForward_ForwardActive); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_FORWARD_FORWARD_ACTIVE, __pyx_t_2) < 0) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":155
 * 
 * # Nav Layer
 * NAV_LAYER_MAIN = enums_internal.ImGuiNavLayer_Main             # <<<<<<<<<<<<<<
 * NAV_LAYER_MENU = enums_internal.ImGuiNavLayer_Menu
 * NAV_LAYER_COUNT = enums_internal.ImGuiNavLayer_COUNT
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavLayer(ImGuiNavLayer_Main); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_LAYER_MAIN, __pyx_t_2) < 0) __PYX_ERR(1, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":156
 * # Nav Layer
 * NAV_LAYER_MAIN = enums_internal.ImGuiNavLayer_Main
 * NAV_LAYER_MENU = enums_internal.ImGuiNavLayer_Menu             # <<<<<<<<<<<<<<
 * NAV_LAYER_COUNT = enums_internal.ImGuiNavLayer_COUNT
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavLayer(ImGuiNavLayer_Menu); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_LAYER_MENU, __pyx_t_2) < 0) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":157
 * NAV_LAYER_MAIN = enums_internal.ImGuiNavLayer_Main
 * NAV_LAYER_MENU = enums_internal.ImGuiNavLayer_Menu
 * NAV_LAYER_COUNT = enums_internal.ImGuiNavLayer_COUNT             # <<<<<<<<<<<<<<
 * 
 * # Popup Position Policy
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNavLayer(ImGuiNavLayer_COUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAV_LAYER_COUNT, __pyx_t_2) < 0) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":160
 * 
 * # Popup Position Policy
 * POPUP_POSITION_POLICY_DEFAULT = enums_internal.ImGuiPopupPositionPolicy_Default             # <<<<<<<<<<<<<<
 * POPUP_POSITION_POLICY_COMBO_BOX = enums_internal.ImGuiPopupPositionPolicy_ComboBox
 * POPUP_POSITION_POLICY_TOOLTIP = enums_internal.ImGuiPopupPositionPolicy_Tooltip
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiPopupPositionPolicy(ImGuiPopupPositionPolicy_Default); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POPUP_POSITION_POLICY_DEFAULT, __pyx_t_2) < 0) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":161
 * # Popup Position Policy
 * POPUP_POSITION_POLICY_DEFAULT = enums_internal.ImGuiPopupPositionPolicy_Default
 * POPUP_POSITION_POLICY_COMBO_BOX = enums_internal.ImGuiPopupPositionPolicy_ComboBox             # <<<<<<<<<<<<<<
 * POPUP_POSITION_POLICY_TOOLTIP = enums_internal.ImGuiPopupPositionPolicy_Tooltip
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiPopupPositionPolicy(ImGuiPopupPositionPolicy_ComboBox); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POPUP_POSITION_POLICY_COMBO_BOX, __pyx_t_2) < 0) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":162
 * POPUP_POSITION_POLICY_DEFAULT = enums_internal.ImGuiPopupPositionPolicy_Default
 * POPUP_POSITION_POLICY_COMBO_BOX = enums_internal.ImGuiPopupPositionPolicy_ComboBox
 * POPUP_POSITION_POLICY_TOOLTIP = enums_internal.ImGuiPopupPositionPolicy_Tooltip             # <<<<<<<<<<<<<<
 * 
 * # Next Window Data Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiPopupPositionPolicy(ImGuiPopupPositionPolicy_Tooltip); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POPUP_POSITION_POLICY_TOOLTIP, __pyx_t_2) < 0) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":165
 * 
 * # Next Window Data Flags
 * NEXT_WINDOW_DATA_NONE = enums_internal.ImGuiNextWindowDataFlags_None             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_POS = enums_internal.ImGuiNextWindowDataFlags_HasPos
 * NEXT_WINDOW_DATA_HAS_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasSize
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":166
 * # Next Window Data Flags
 * NEXT_WINDOW_DATA_NONE = enums_internal.ImGuiNextWindowDataFlags_None
 * NEXT_WINDOW_DATA_HAS_POS = enums_internal.ImGuiNextWindowDataFlags_HasPos             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasSize
 * NEXT_WINDOW_DATA_HAS_CONTENT_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasContentSize
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasPos); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_POS, __pyx_t_2) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":167
 * NEXT_WINDOW_DATA_NONE = enums_internal.ImGuiNextWindowDataFlags_None
 * NEXT_WINDOW_DATA_HAS_POS = enums_internal.ImGuiNextWindowDataFlags_HasPos
 * NEXT_WINDOW_DATA_HAS_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasSize             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_CONTENT_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasContentSize
 * NEXT_WINDOW_DATA_HAS_COLLAPSED = enums_internal.ImGuiNextWindowDataFlags_HasCollapsed
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_SIZE, __pyx_t_2) < 0) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":168
 * NEXT_WINDOW_DATA_HAS_POS = enums_internal.ImGuiNextWindowDataFlags_HasPos
 * NEXT_WINDOW_DATA_HAS_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasSize
 * NEXT_WINDOW_DATA_HAS_CONTENT_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasContentSize             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_COLLAPSED = enums_internal.ImGuiNextWindowDataFlags_HasCollapsed
 * NEXT_WINDOW_DATA_HAS_SIZE_CONSTRAINT = enums_internal.ImGuiNextWindowDataFlags_HasSizeConstraint
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasContentSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_CONTENT_SIZ, __pyx_t_2) < 0) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":169
 * NEXT_WINDOW_DATA_HAS_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasSize
 * NEXT_WINDOW_DATA_HAS_CONTENT_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasContentSize
 * NEXT_WINDOW_DATA_HAS_COLLAPSED = enums_internal.ImGuiNextWindowDataFlags_HasCollapsed             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_SIZE_CONSTRAINT = enums_internal.ImGuiNextWindowDataFlags_HasSizeConstraint
 * NEXT_WINDOW_DATA_HAS_FOCUS = enums_internal.ImGuiNextWindowDataFlags_HasFocus
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasCollapsed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_COLLAPSED, __pyx_t_2) < 0) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":170
 * NEXT_WINDOW_DATA_HAS_CONTENT_SIZE = enums_internal.ImGuiNextWindowDataFlags_HasContentSize
 * NEXT_WINDOW_DATA_HAS_COLLAPSED = enums_internal.ImGuiNextWindowDataFlags_HasCollapsed
 * NEXT_WINDOW_DATA_HAS_SIZE_CONSTRAINT = enums_internal.ImGuiNextWindowDataFlags_HasSizeConstraint             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_FOCUS = enums_internal.ImGuiNextWindowDataFlags_HasFocus
 * NEXT_WINDOW_DATA_HAS_BACKGROUND_ALPHA = enums_internal.ImGuiNextWindowDataFlags_HasBgAlpha
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasSizeConstraint); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_SIZE_CONSTR, __pyx_t_2) < 0) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":171
 * NEXT_WINDOW_DATA_HAS_COLLAPSED = enums_internal.ImGuiNextWindowDataFlags_HasCollapsed
 * NEXT_WINDOW_DATA_HAS_SIZE_CONSTRAINT = enums_internal.ImGuiNextWindowDataFlags_HasSizeConstraint
 * NEXT_WINDOW_DATA_HAS_FOCUS = enums_internal.ImGuiNextWindowDataFlags_HasFocus             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_BACKGROUND_ALPHA = enums_internal.ImGuiNextWindowDataFlags_HasBgAlpha
 * NEXT_WINDOW_DATA_HAS_SCROLL = enums_internal.ImGuiNextWindowDataFlags_HasScroll
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasFocus); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_FOCUS, __pyx_t_2) < 0) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":172
 * NEXT_WINDOW_DATA_HAS_SIZE_CONSTRAINT = enums_internal.ImGuiNextWindowDataFlags_HasSizeConstraint
 * NEXT_WINDOW_DATA_HAS_FOCUS = enums_internal.ImGuiNextWindowDataFlags_HasFocus
 * NEXT_WINDOW_DATA_HAS_BACKGROUND_ALPHA = enums_internal.ImGuiNextWindowDataFlags_HasBgAlpha             # <<<<<<<<<<<<<<
 * NEXT_WINDOW_DATA_HAS_SCROLL = enums_internal.ImGuiNextWindowDataFlags_HasScroll
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasBgAlpha); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_BACKGROUND, __pyx_t_2) < 0) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":173
 * NEXT_WINDOW_DATA_HAS_FOCUS = enums_internal.ImGuiNextWindowDataFlags_HasFocus
 * NEXT_WINDOW_DATA_HAS_BACKGROUND_ALPHA = enums_internal.ImGuiNextWindowDataFlags_HasBgAlpha
 * NEXT_WINDOW_DATA_HAS_SCROLL = enums_internal.ImGuiNextWindowDataFlags_HasScroll             # <<<<<<<<<<<<<<
 * 
 * # Next Item Data Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_HasScroll); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_WINDOW_DATA_HAS_SCROLL, __pyx_t_2) < 0) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":176
 * 
 * # Next Item Data Flags
 * NEXT_ITEM_DATA_NONE = enums_internal.ImGuiNextItemDataFlags_None             # <<<<<<<<<<<<<<
 * NEXT_ITEM_DATA_HAS_WIDTH = enums_internal.ImGuiNextItemDataFlags_HasWidth
 * NEXT_ITEM_DATA_HAS_OPEN = enums_internal.ImGuiNextItemDataFlags_HasOpen
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextItemDataFlags_(ImGuiNextItemDataFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_ITEM_DATA_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":177
 * # Next Item Data Flags
 * NEXT_ITEM_DATA_NONE = enums_internal.ImGuiNextItemDataFlags_None
 * NEXT_ITEM_DATA_HAS_WIDTH = enums_internal.ImGuiNextItemDataFlags_HasWidth             # <<<<<<<<<<<<<<
 * NEXT_ITEM_DATA_HAS_OPEN = enums_internal.ImGuiNextItemDataFlags_HasOpen
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextItemDataFlags_(ImGuiNextItemDataFlags_HasWidth); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_ITEM_DATA_HAS_WIDTH, __pyx_t_2) < 0) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":178
 * NEXT_ITEM_DATA_NONE = enums_internal.ImGuiNextItemDataFlags_None
 * NEXT_ITEM_DATA_HAS_WIDTH = enums_internal.ImGuiNextItemDataFlags_HasWidth
 * NEXT_ITEM_DATA_HAS_OPEN = enums_internal.ImGuiNextItemDataFlags_HasOpen             # <<<<<<<<<<<<<<
 * 
 * # Columns Flags
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiNextItemDataFlags_(ImGuiNextItemDataFlags_HasOpen); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_ITEM_DATA_HAS_OPEN, __pyx_t_2) < 0) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":181
 * 
 * # Columns Flags
 * OLD_COLUMNS_NONE = enums_internal.ImGuiOldColumnFlags_None             # <<<<<<<<<<<<<<
 * OLD_COLUMNS_NO_BORDER = enums_internal.ImGuiOldColumnFlags_NoBorder
 * OLD_COLUMNS_NO_RESIZE = enums_internal.ImGuiOldColumnFlags_NoResize
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OLD_COLUMNS_NONE, __pyx_t_2) < 0) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":182
 * # Columns Flags
 * OLD_COLUMNS_NONE = enums_internal.ImGuiOldColumnFlags_None
 * OLD_COLUMNS_NO_BORDER = enums_internal.ImGuiOldColumnFlags_NoBorder             # <<<<<<<<<<<<<<
 * OLD_COLUMNS_NO_RESIZE = enums_internal.ImGuiOldColumnFlags_NoResize
 * OLD_COLUMNS_NO_PRESERVE_WIDTHS = enums_internal.ImGuiOldColumnFlags_NoPreserveWidths
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_NoBorder); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OLD_COLUMNS_NO_BORDER, __pyx_t_2) < 0) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":183
 * OLD_COLUMNS_NONE = enums_internal.ImGuiOldColumnFlags_None
 * OLD_COLUMNS_NO_BORDER = enums_internal.ImGuiOldColumnFlags_NoBorder
 * OLD_COLUMNS_NO_RESIZE = enums_internal.ImGuiOldColumnFlags_NoResize             # <<<<<<<<<<<<<<
 * OLD_COLUMNS_NO_PRESERVE_WIDTHS = enums_internal.ImGuiOldColumnFlags_NoPreserveWidths
 * OLD_COLUMNS_NO_FORCE_WIDTHIN_WINDOW = enums_internal.ImGuiOldColumnFlags_NoForceWithinWindow
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_NoResize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OLD_COLUMNS_NO_RESIZE, __pyx_t_2) < 0) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":184
 * OLD_COLUMNS_NO_BORDER = enums_internal.ImGuiOldColumnFlags_NoBorder
 * OLD_COLUMNS_NO_RESIZE = enums_internal.ImGuiOldColumnFlags_NoResize
 * OLD_COLUMNS_NO_PRESERVE_WIDTHS = enums_internal.ImGuiOldColumnFlags_NoPreserveWidths             # <<<<<<<<<<<<<<
 * OLD_COLUMNS_NO_FORCE_WIDTHIN_WINDOW = enums_internal.ImGuiOldColumnFlags_NoForceWithinWindow
 * OLD_COLUMNS_GROW_PARENT_CONTENTS_SIZE = enums_internal.ImGuiOldColumnFlags_GrowParentContentsSize
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_NoPreserveWidths); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OLD_COLUMNS_NO_PRESERVE_WIDTHS, __pyx_t_2) < 0) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":185
 * OLD_COLUMNS_NO_RESIZE = enums_internal.ImGuiOldColumnFlags_NoResize
 * OLD_COLUMNS_NO_PRESERVE_WIDTHS = enums_internal.ImGuiOldColumnFlags_NoPreserveWidths
 * OLD_COLUMNS_NO_FORCE_WIDTHIN_WINDOW = enums_internal.ImGuiOldColumnFlags_NoForceWithinWindow             # <<<<<<<<<<<<<<
 * OLD_COLUMNS_GROW_PARENT_CONTENTS_SIZE = enums_internal.ImGuiOldColumnFlags_GrowParentContentsSize
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_NoForceWithinWindow); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OLD_COLUMNS_NO_FORCE_WIDTHIN_WIN, __pyx_t_2) < 0) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":186
 * OLD_COLUMNS_NO_PRESERVE_WIDTHS = enums_internal.ImGuiOldColumnFlags_NoPreserveWidths
 * OLD_COLUMNS_NO_FORCE_WIDTHIN_WINDOW = enums_internal.ImGuiOldColumnFlags_NoForceWithinWindow
 * OLD_COLUMNS_GROW_PARENT_CONTENTS_SIZE = enums_internal.ImGuiOldColumnFlags_GrowParentContentsSize             # <<<<<<<<<<<<<<
 * 
 * # Tab Bar Flags Private
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_GrowParentContentsSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OLD_COLUMNS_GROW_PARENT_CONTENTS, __pyx_t_2) < 0) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":189
 * 
 * # Tab Bar Flags Private
 * TAB_BAR_DOCK_NODE = enums_internal.ImGuiTabBarFlags_DockNode             # <<<<<<<<<<<<<<
 * TAB_BAR_IS_FOCUSED = enums_internal.ImGuiTabBarFlags_IsFocused
 * TAB_BAR_SAVE_SETTINGS = enums_internal.ImGuiTabBarFlags_SaveSettings
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTabBarFlagsPrivate_(ImGuiTabBarFlags_DockNode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TAB_BAR_DOCK_NODE, __pyx_t_2) < 0) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":190
 * # Tab Bar Flags Private
 * TAB_BAR_DOCK_NODE = enums_internal.ImGuiTabBarFlags_DockNode
 * TAB_BAR_IS_FOCUSED = enums_internal.ImGuiTabBarFlags_IsFocused             # <<<<<<<<<<<<<<
 * TAB_BAR_SAVE_SETTINGS = enums_internal.ImGuiTabBarFlags_SaveSettings
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTabBarFlagsPrivate_(ImGuiTabBarFlags_IsFocused); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TAB_BAR_IS_FOCUSED, __pyx_t_2) < 0) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":191
 * TAB_BAR_DOCK_NODE = enums_internal.ImGuiTabBarFlags_DockNode
 * TAB_BAR_IS_FOCUSED = enums_internal.ImGuiTabBarFlags_IsFocused
 * TAB_BAR_SAVE_SETTINGS = enums_internal.ImGuiTabBarFlags_SaveSettings             # <<<<<<<<<<<<<<
 * 
 * # Tab Item Flags Private
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTabBarFlagsPrivate_(ImGuiTabBarFlags_SaveSettings); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TAB_BAR_SAVE_SETTINGS, __pyx_t_2) < 0) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":194
 * 
 * # Tab Item Flags Private
 * TAB_ITEM_NO_CLOSE_BUTTON = enums_internal.ImGuiTabItemFlags_NoCloseButton             # <<<<<<<<<<<<<<
 * TAB_ITEM_BUTTON = enums_internal.ImGuiTabItemFlags_Button
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTabItemFlagsPrivate_(ImGuiTabItemFlags_NoCloseButton); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TAB_ITEM_NO_CLOSE_BUTTON, __pyx_t_2) < 0) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":195
 * # Tab Item Flags Private
 * TAB_ITEM_NO_CLOSE_BUTTON = enums_internal.ImGuiTabItemFlags_NoCloseButton
 * TAB_ITEM_BUTTON = enums_internal.ImGuiTabItemFlags_Button             # <<<<<<<<<<<<<<
 * 
 * # === API ===
 */
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiTabItemFlagsPrivate_(ImGuiTabItemFlags_Button); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TAB_ITEM_BUTTON, __pyx_t_2) < 0) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":199
 * # === API ===
 * 
 * def push_item_flag(internal.ImGuiItemFlags option, bool enabled):             # <<<<<<<<<<<<<<
 *     # TODO: document
 *     internal.PushItemFlag(option, enabled)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_10gaiaengine_5imgui_8internal_1push_item_flag, NULL, __pyx_n_s_gaiaengine_imgui_internal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push_item_flag, __pyx_t_2) < 0) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":203
 *     internal.PushItemFlag(option, enabled)
 * 
 * def pop_item_flag():             # <<<<<<<<<<<<<<
 *     internal.PopItemFlag()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_10gaiaengine_5imgui_8internal_3pop_item_flag, NULL, __pyx_n_s_gaiaengine_imgui_internal); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pop_item_flag, __pyx_t_2) < 0) __PYX_ERR(1, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gaiaengine/imgui/internal.pyx":1
 * # cython: embedsignature=True             # <<<<<<<<<<<<<<
 * 
 * import cython
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init gaiaengine.imgui.internal", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init gaiaengine.imgui.internal");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiItemFlags_(ImGuiItemFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiItemFlags_ neg_one = (ImGuiItemFlags_) -1, const_zero = (ImGuiItemFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiItemFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiItemFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiItemFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiItemFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiItemFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiItemFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiItemStatusFlags_(ImGuiItemStatusFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiItemStatusFlags_ neg_one = (ImGuiItemStatusFlags_) -1, const_zero = (ImGuiItemStatusFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiItemStatusFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiItemStatusFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiItemStatusFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiItemStatusFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiItemStatusFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiItemStatusFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiButtonFlagsPrivate_(ImGuiButtonFlagsPrivate_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiButtonFlagsPrivate_ neg_one = (ImGuiButtonFlagsPrivate_) -1, const_zero = (ImGuiButtonFlagsPrivate_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiButtonFlagsPrivate_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiButtonFlagsPrivate_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiButtonFlagsPrivate_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiButtonFlagsPrivate_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiButtonFlagsPrivate_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiButtonFlagsPrivate_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSliderFlagsPrivate_(ImGuiSliderFlagsPrivate_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiSliderFlagsPrivate_ neg_one = (ImGuiSliderFlagsPrivate_) -1, const_zero = (ImGuiSliderFlagsPrivate_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSliderFlagsPrivate_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSliderFlagsPrivate_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSliderFlagsPrivate_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSliderFlagsPrivate_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSliderFlagsPrivate_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSliderFlagsPrivate_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlagsPrivate_(ImGuiSelectableFlagsPrivate_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiSelectableFlagsPrivate_ neg_one = (ImGuiSelectableFlagsPrivate_) -1, const_zero = (ImGuiSelectableFlagsPrivate_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSelectableFlagsPrivate_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSelectableFlagsPrivate_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlagsPrivate_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSelectableFlagsPrivate_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlagsPrivate_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSelectableFlagsPrivate_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlagsPrivate_(ImGuiTreeNodeFlagsPrivate_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTreeNodeFlagsPrivate_ neg_one = (ImGuiTreeNodeFlagsPrivate_) -1, const_zero = (ImGuiTreeNodeFlagsPrivate_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTreeNodeFlagsPrivate_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTreeNodeFlagsPrivate_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlagsPrivate_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTreeNodeFlagsPrivate_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlagsPrivate_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTreeNodeFlagsPrivate_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSeparatorFlags_(ImGuiSeparatorFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiSeparatorFlags_ neg_one = (ImGuiSeparatorFlags_) -1, const_zero = (ImGuiSeparatorFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSeparatorFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSeparatorFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSeparatorFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSeparatorFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSeparatorFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSeparatorFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTextFlags_(ImGuiTextFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTextFlags_ neg_one = (ImGuiTextFlags_) -1, const_zero = (ImGuiTextFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTextFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTextFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTextFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTextFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTextFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTextFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTooltipFlags_(ImGuiTooltipFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTooltipFlags_ neg_one = (ImGuiTooltipFlags_) -1, const_zero = (ImGuiTooltipFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTooltipFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTooltipFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTooltipFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTooltipFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTooltipFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTooltipFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiLayoutType_(ImGuiLayoutType_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiLayoutType_ neg_one = (ImGuiLayoutType_) -1, const_zero = (ImGuiLayoutType_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiLayoutType_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiLayoutType_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiLayoutType_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiLayoutType_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiLayoutType_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiLayoutType_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiLogType(ImGuiLogType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiLogType neg_one = (ImGuiLogType) -1, const_zero = (ImGuiLogType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiLogType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiLogType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiLogType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiLogType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiLogType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiLogType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiAxis(ImGuiAxis value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiAxis neg_one = (ImGuiAxis) -1, const_zero = (ImGuiAxis) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiAxis) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiAxis) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiAxis) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiAxis) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiAxis) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiAxis),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiPlotType(ImGuiPlotType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiPlotType neg_one = (ImGuiPlotType) -1, const_zero = (ImGuiPlotType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiPlotType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiPlotType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiPlotType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiPlotType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiPlotType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiPlotType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputSource(ImGuiInputSource value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiInputSource neg_one = (ImGuiInputSource) -1, const_zero = (ImGuiInputSource) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiInputSource) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiInputSource) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputSource) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiInputSource) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputSource) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiInputSource),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputReadMode(ImGuiInputReadMode value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiInputReadMode neg_one = (ImGuiInputReadMode) -1, const_zero = (ImGuiInputReadMode) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiInputReadMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiInputReadMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputReadMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiInputReadMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputReadMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiInputReadMode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavHighlightFlags_(ImGuiNavHighlightFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNavHighlightFlags_ neg_one = (ImGuiNavHighlightFlags_) -1, const_zero = (ImGuiNavHighlightFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNavHighlightFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNavHighlightFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavHighlightFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNavHighlightFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavHighlightFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNavHighlightFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavDirSourceFlags_(ImGuiNavDirSourceFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNavDirSourceFlags_ neg_one = (ImGuiNavDirSourceFlags_) -1, const_zero = (ImGuiNavDirSourceFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNavDirSourceFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNavDirSourceFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavDirSourceFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNavDirSourceFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavDirSourceFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNavDirSourceFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavMoveFlags_(ImGuiNavMoveFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNavMoveFlags_ neg_one = (ImGuiNavMoveFlags_) -1, const_zero = (ImGuiNavMoveFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNavMoveFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNavMoveFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavMoveFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNavMoveFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavMoveFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNavMoveFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavForward(ImGuiNavForward value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNavForward neg_one = (ImGuiNavForward) -1, const_zero = (ImGuiNavForward) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNavForward) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNavForward) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavForward) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNavForward) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavForward) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNavForward),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavLayer(ImGuiNavLayer value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNavLayer neg_one = (ImGuiNavLayer) -1, const_zero = (ImGuiNavLayer) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNavLayer) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNavLayer) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavLayer) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNavLayer) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavLayer) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNavLayer),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiPopupPositionPolicy(ImGuiPopupPositionPolicy value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiPopupPositionPolicy neg_one = (ImGuiPopupPositionPolicy) -1, const_zero = (ImGuiPopupPositionPolicy) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiPopupPositionPolicy) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiPopupPositionPolicy) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiPopupPositionPolicy) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiPopupPositionPolicy) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiPopupPositionPolicy) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiPopupPositionPolicy),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNextWindowDataFlags_(ImGuiNextWindowDataFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNextWindowDataFlags_ neg_one = (ImGuiNextWindowDataFlags_) -1, const_zero = (ImGuiNextWindowDataFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNextWindowDataFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNextWindowDataFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNextWindowDataFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNextWindowDataFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNextWindowDataFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNextWindowDataFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNextItemDataFlags_(ImGuiNextItemDataFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNextItemDataFlags_ neg_one = (ImGuiNextItemDataFlags_) -1, const_zero = (ImGuiNextItemDataFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNextItemDataFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNextItemDataFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNextItemDataFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNextItemDataFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNextItemDataFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNextItemDataFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiOldColumnFlags_(ImGuiOldColumnFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiOldColumnFlags_ neg_one = (ImGuiOldColumnFlags_) -1, const_zero = (ImGuiOldColumnFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiOldColumnFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiOldColumnFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiOldColumnFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiOldColumnFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiOldColumnFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiOldColumnFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabBarFlagsPrivate_(ImGuiTabBarFlagsPrivate_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTabBarFlagsPrivate_ neg_one = (ImGuiTabBarFlagsPrivate_) -1, const_zero = (ImGuiTabBarFlagsPrivate_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTabBarFlagsPrivate_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTabBarFlagsPrivate_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabBarFlagsPrivate_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTabBarFlagsPrivate_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabBarFlagsPrivate_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTabBarFlagsPrivate_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabItemFlagsPrivate_(ImGuiTabItemFlagsPrivate_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTabItemFlagsPrivate_ neg_one = (ImGuiTabItemFlagsPrivate_) -1, const_zero = (ImGuiTabItemFlagsPrivate_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTabItemFlagsPrivate_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTabItemFlagsPrivate_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabItemFlagsPrivate_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTabItemFlagsPrivate_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabItemFlagsPrivate_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTabItemFlagsPrivate_),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE ImGuiItemFlags __Pyx_PyInt_As_ImGuiItemFlags(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiItemFlags neg_one = (ImGuiItemFlags) -1, const_zero = (ImGuiItemFlags) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiItemFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiItemFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiItemFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiItemFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) (((((ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiItemFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) (((((((ImGuiItemFlags)digits[2]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiItemFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) (((((((((ImGuiItemFlags)digits[3]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[2]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiItemFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiItemFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiItemFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiItemFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiItemFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiItemFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiItemFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiItemFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) (((ImGuiItemFlags)-1)*(((((ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiItemFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) ((((((ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiItemFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) (((ImGuiItemFlags)-1)*(((((((ImGuiItemFlags)digits[2]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiItemFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) ((((((((ImGuiItemFlags)digits[2]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiItemFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) (((ImGuiItemFlags)-1)*(((((((((ImGuiItemFlags)digits[3]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[2]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiItemFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiItemFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiItemFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiItemFlags) ((((((((((ImGuiItemFlags)digits[3]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[2]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[1]) << PyLong_SHIFT) | (ImGuiItemFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiItemFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiItemFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiItemFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiItemFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiItemFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiItemFlags) -1;
        }
    } else {
        ImGuiItemFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiItemFlags) -1;
        val = __Pyx_PyInt_As_ImGuiItemFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiItemFlags");
    return (ImGuiItemFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiItemFlags");
    return (ImGuiItemFlags) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
